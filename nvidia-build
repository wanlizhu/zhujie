#!/bin/bash
NVBRANCH="sw/dev/gpu_drv/dev_a"
NVBUILD_LOCK="/tmp/nvbuild.lock"
NVBUILD_OUT="$HOME/NVIDIA-OUT/nvidia-build"
NVBUILD_SO_FILES="$NVBUILD_OUT/nvmake.products"
NVFLAG_BACKUP=0

function nvbuild-source-version() {
    echo `grep '^#define NV_VERSION_STRING' $P4ROOT/$NVBRANCH/drivers/common/inc/nvUnixVersion.h  | awk '{print $3}' | sed 's/"//g'`
}

function nvbuild-backup() {
    if [ "$NVFLAG_BACKUP" != "1" ]; then
        return
    fi

    if [ "$1" = "" -o "$2" = "" -o "$3" = "" ]; then
        echo "Usage: nvbuild-backup [ARCH] [BUILD_TYPE] [IS_PPP:BOOL]" > /dev/stderr
        return 1
    fi

    ARCH="$1"
    BUILD_TYPE="$2"
    IS_PPP="$3"
    FOLDER="Linux_"$ARCH"_$BUILD_TYPE"
    VERSION=$(nvbuild-source-version)
    ARCHNAME=$([ "$ARCH" = "amd64" ] && echo "x86_64" || echo "$ARCH")
    SUFFIX=$([ "$IS_PPP" = "1" ] && echo "" || echo "-internal")
    NICKNAME=$([ "$IS_PPP" = "1" ] && echo "-32compat" || echo "")
    FILENAME="NVIDIA-Linux-$ARCHNAME-$VERSION$SUFFIX.run"
    SRC_FILE="$P4ROOT/$NVBRANCH/_out/$FOLDER/$FILENAME"
    DST_FILE="$NVBUILD_OUT/NVIDIA-$FOLDER-$VERSION$SUFFIX$NICKNAME.run"
    
    if [ ! -d "$NVBUILD_OUT" ]; then
        mkdir -p "$NVBUILD_OUT"
    fi
    
    cp "$SRC_FILE" "$DST_FILE" && (
        echo "Create: NVIDIA-$FOLDER-$VERSION$SUFFIX$NICKNAME.run"
    ) 
    
    ln -s -f "$DST_FILE" "$NVBUILD_OUT/LAST_BUILD"
}

function nvbuild-nvmake() {
    ARCH="$1"
    BUILD_TYPE="$2"
    MODULE="$3"
    IS_PPP=0
    CWD_BACKUP="`pwd`"
    mkdir -p "$NVBUILD_OUT"

    if [ "$1" = "" -o "$2" = "" -o "$3" = "" ]; then
        echo "Usage: nvbuild-nvmake [ARCH] [BUILD_TYPE] [MODULE]" > /dev/stderr
        return 1
    fi

    if [ -f "$NVBUILD_LOCK" ]; then
        echo "Error: Lock $NVBUILD_LOCK exist" > /dev/stderr
        return 1
    fi

    if [ -z "$P4ROOT" ]; then
        echo "Error: P4ROOT is missing" > /dev/stderr
        return 1
    fi

    if [ -z "$NVBRANCH" ]; then
        echo "Error: NVBRANCH is missing" > /dev/stderr
        return 1
    fi

    case "$MODULE" in
        sweep)
            ARCH=""
            BUILD_TYPE=""
            MODULE="sweep"
            cd "$P4ROOT/$NVBRANCH"
        ;;
        
        drivers|dist)
            MODULE="drivers dist"
            cd "$P4ROOT/$NVBRANCH"
        ;;

        ppp)
            MODULE="post-process-packages dist"
            IS_PPP=1
            cd "$P4ROOT/$NVBRANCH"
        ;;

        opengl)
            MODULE="opengl"
            cd "$P4ROOT/$NVBRANCH/drivers/OpenGL"
        ;;

        *)
            echo "Error: Module \"$1\" is not supported" > /dev/stderr
            return 1
        ;;
    esac

    SECONDS=0
    STDOUT_FILE="$NVBUILD_OUT/nvmake.stdout"
    STDERR_FILE="$NVBUILD_OUT/nvmake.stderr"

    echo "NVMake: linux $ARCH $BUILD_TYPE $MODULE"
    echo "`date +%s`" > "$NVBUILD_LOCK"

    if [ "$(stat -c '%U' $P4ROOT/sw/misc/linux/unix-build)" != "root" ]; then
        UNIX_BUILD_ARGS="--unshare-namespaces"
    else
        UNIX_BUILD_ARGS=""
    fi

    ERRORCODE=0
    ionice -c2 nice \
    $P4ROOT/sw/misc/linux/unix-build $UNIX_BUILD_ARGS \
    --tools "$P4ROOT/sw/tools" \
    --devrel "$P4ROOT/sw/devrel/SDK/inc/GL" \
    nvmake \
    NV_COLOR_OUTPUT=1 \
    NV_COMPRESS_THREADS=16 \
    NV_FAST_PACKAGE_COMPRESSION=1 \
    NV_EXCLUDE_BUILD_MODULES="" \
    NV_KEEP_UNSTRIPPED_BINARIES=1 \
    NV_GUARDWORD=0 \
    -j16 \
    linux \
    $ARCH \
    $BUILD_TYPE \
    $MODULE \
    1> "$STDOUT_FILE" \
    2> "$STDERR_FILE" && (
        nvidia-backup  $ARCH $BUILD_TYPE $IS_PPP
    ) || (
        grep -E -i -w "fatal|error|errors|critical|failed|: \*\*\*" "$STDERR_FILE";
        ERRORCODE=1 
    )

    echo "NVMake: Time cost: [$(expr $SECONDS / 60) mins]"
    echo ""

    rm -rf "$NVBUILD_LOCK"
    cd "$CWD_BACKUP"

    return $ERRORCODE
}

## MAIN

if [ -z "$1" ]; then
    echo "Usage: nvidia-build [MODULE] [ARCH] [BUILD_TYPE] [ppp|sweep] [-b|--backup]"
    echo "  e.g. nvidia-build sweep"
    echo "  e.g. nvidia-build amd64 release -b"
    echo "  e.g. nvidia-build amd64 release develop -b"
    echo "  e.g. nvidia-build ppp -b"
    echo "  e.g. nvidia-build ppp release develop -b"
    exit 1
fi

ARCHS=""
BUILD_TYPES=""
MODULES=""

while [ -n "$1" ]; do
    case "$1" in
        -b|--backup)
            NVFLAG_BACKUP=1
        ;;

        amd64)
            ARCHS="$ARCHS amd64"
        ;;

        x86)
            ARCHS="$ARCHS x86"
        ;;

        release)
            BUILD_TYPES="$BUILD_TYPES release"
        ;;

        debug) 
            BUILD_TYPES="$BUILD_TYPES debug"
        ;;

        develop)
            BUILD_TYPES="$BUILD_TYPES develop"
        ;;

        dist)
            MODULES="dist"
        ;;

        sweep)
            MODULES="sweep"
        ;;

        ppp)
            MODULES="ppp"
        ;;

        opengl)
            MODULES="opengl"
        ;;
    
        *)
            echo "Error: Unknown argument: $1" > /dev/stderr
            nvidia-build
            exit 1
        ;;
    esac
    shift
done

if [ -z "$ARCHS" ]; then
    ARCHS="amd64"
fi

if [ -z "$BUILD_TYPES" ]; then
    BUILD_TYPES="release"
fi

if [ -z "$MODULES" ]; then
    MODULES="dist"
fi

for ARCH in $ARCHS; do
    for BUILD_TYPE in $BUILD_TYPES; do
        for MODULE in $MODULES; do
            if [ "$MODULE" = "ppp" ]; then
                nvbuild-nvmake amd64 $BUILD_TYPE dist &&
                nvbuild-nvmake x86   $BUILD_TYPE dist &&
                nvbuild-nvmake amd64 $BUILD_TYPE ppp
            else
                nvbuild-nvmake $ARCH $BUILD_TYPE $MODULE
            fi
        done 
    done
done

