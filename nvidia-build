#!/bin/bash

NVBLD_PLATFORM=linux
NVBLD_ARCH=amd64
NVBLD_BUILD_TYPE=release
NVBLD_NVSRC="$HOME/NVIDIA/SRC_ON_P4"
NVBLD_BRANCH="sw/dev/gpu_drv/dev_a"
NVBLD_LOCK_FILE=/tmp/NVIDIA-BUILD.LOCK
NVBLD_OUTPUT_DIR="$HOME/NVIDIA-BUILD"
NVBLD_MODULES_FILE="$NVBLD_OUTPUT_DIR/NVIDIA_MODULES"
NVBLD_EXCLUDE_BUILD_MODULES=""
NVBLD_UNIX_BUILD_ARGS=""
NVBLD_MODULES="drivers dist"
NVBLD_BACKUP=1
NVBLD_INSTALL=0
NVBLD_PPP=0
NVBLD_DEPLOY=""
NVBLD_NICKNAME=""

function nvidia-source-version() {
    echo `grep '^#define NV_VERSION_STRING' $NVBLD_NVSRC/$NVBLD_BRANCH/drivers/common/inc/nvUnixVersion.h  | awk '{print $3}' | sed 's/"//g'`
}

function nvidia-backup() {
    if [ "$NVBLD_BACKUP" != "1" ]; then
        echo "NVIDIA BACKUP: NOTHING TO BACKUP"
        return
    fi

    FOLDER="Linux_"$NVBLD_ARCH"_$NVBLD_BUILD_TYPE"
    VERSION=$(nvidia-source-version)
    ARCHNAME=$([ "$NVBLD_ARCH" = "amd64" ] && echo "x86_64" || echo "$NVBLD_ARCH")
    SUFFIX=$([ "$NVBLD_PPP" = "1" ] && echo "" || echo "-internal")
    FILENAME="NVIDIA-Linux-$ARCHNAME-$VERSION$SUFFIX.run"
    NICKNAME=$([ ! -z "$NVBLD_NICKNAME" ] && echo "-$NVBLD_NICKNAME" || echo "")
    SRC_FILE="$NVBLD_NVSRC/$NVBLD_BRANCH/_out/$FOLDER/$FILENAME"
    DST_FILE="$NVBLD_OUTPUT_DIR/NVIDIA-$FOLDER-$VERSION$SUFFIX$NICKNAME.run"
    
    if [ ! -f "$NVBLD_LOCK_FILE" ]; then
        echo "NVIDIA BACKUP: ERROR: FILE $NVBLD_LOCK_FILE IS MISSING" > /dev/stderr
        return 1
    fi

    if [ ! -f "$SRC_FILE" ]; then
        echo "NVIDIA BACKUP: ERROR: NVIDIA DRIVER DOES NOT EXIST AT $SRC_FILE" > /dev/stderr
        return 1
    fi
    
    if [ ! -d "$NVBLD_OUTPUT_DIR" ]; then
        mkdir -p "$NVBLD_OUTPUT_DIR"
    fi
    
    cp "$SRC_FILE" "$DST_FILE" && (
        echo "NVIDIA BACKUP: NVIDIA-$FOLDER-$VERSION$SUFFIX$NICKNAME.run"
    )
    
    ln -s -f "$DST_FILE" "$NVBLD_OUTPUT_DIR/LATEST-BUILD.RUN"
}

function nvidia-install() {
    if [ "$NVBLD_INSTALL" != "1" ]; then
        echo "NVIDIA INSTALL: NOTHING TO INSTALL"
        return
    fi

    FOLDER="Linux_"$NVBLD_ARCH"_$NVBLD_BUILD_TYPE"
    VERSION=$(nvidia-source-version)
    ARCHNAME=$([ "$NVBLD_ARCH" = "amd64" ] && echo "x86_64" || echo "$NVBLD_ARCH")
    SUFFIX=$([ "$NVBLD_PPP" = "1" ] && echo "" || echo "-internal")
    FILENAME="NVIDIA-Linux-$ARCHNAME-$VERSION$SUFFIX.run"
    NICKNAME=$([ ! -z "$NVBLD_NICKNAME" ] && echo "-$NVBLD_NICKNAME" || echo "")
    SRC_FILE="$NVBLD_NVSRC/$NVBLD_BRANCH/_out/$FOLDER/$FILENAME"
    DST_FILE="$NVBLD_OUTPUT_DIR/NVIDIA-$FOLDER-$VERSION$SUFFIX$NICKNAME.run"
    
    if [ ! -f "$NVBLD_LOCK_FILE" ]; then
        echo "NVIDIA INSTALL: ERROR: FILE $NVBLD_LOCK_FILE IS MISSING" > /dev/stderr
        return 1
    fi

    if [ ! -f "$SRC_FILE" ]; then
        echo "NVIDIA INSTALL: ERROR: NVIDIA DRIVER DOES NOT EXIST AT $SRC_FILE" > /dev/stderr
        return 1
    fi

    who am i > /dev/null && (
        echo "NVIDIA INSTALL: " 
        echo "==> ENTER MULTI-USER MODE"
        sudo systemctl isolate multi-user

        echo "==> RUN NVIDIA INSTALLER"
        sudo $HOME/NVIDIA-BUILD/LATEST-BUILD.RUN -sb

        echo "==> ENTER GRAPHICAL MODE"
        sudo systemctl isolate graphical
    ) || echo "ERROR: YOU CAN ONLY RUN INSTALLER ON SSH" > /dev/stderr 
}

function nvidia-changed() {
    if [ ! -f "$NVBLD_LOCK_FILE" ]; then
        echo "ERROR: FILE $NVBLD_LOCK_FILE IS MISSING" > /dev/stderr
        return 1
    fi

    mkdir -p "$NVBLD_OUTPUT_DIR"
    find "$NVBLD_NVSRC/$NVBLD_BRANCH" -type f -newer "$NVBLD_LOCK_FILE" \( -name "*.so" -o -name "*.so.*" \) > "$NVBLD_MODULES_FILE" || (
        echo "ERROR: FAILED TO FIND NVIDIA MODULES"
    )
    
    echo "NVIDIA MODULES CHANGED: [$(wc -l < $NVBLD_MODULES_FILE) FILES FOUND]"
    
    # echo "[$(wc -l < $NVBLD_MODULES_FILE) FILES FOUND]"
    # 
    # head -9 "$NVBLD_MODULES_FILE" |
    # while read LINE; do
    #     echo $LINE
    # done
    # 
    # if [ $(wc -l < $NVBLD_MODULES_FILE) -gt 9 ]; then
    #     echo "..."
    # fi
}

function nvidia-deploy() {
    if [ "$NVBLD_DEPLOY" = "" ]; then
        echo "NVIDIA DEPLOY: NOTHING TO DEPLOY"
        return
    fi
    
    case "$NVBLD_DEPLOY" in
        opengl)
            echo "NVIDIA DEPLOY: opengl"
            FOLDER="Linux_"$NVBLD_ARCH"_$NVBLD_BUILD_TYPE"
            OUTDIR="$NVBLD_NVSRC/$NVBLD_BRANCH/drivers/OpenGL/_out/$FOLDER"
            FILENAME="libnvidia-glcore.so"
            VERSION=$(nvidia-source-version)
            ARCHNAME=$([ "$NVBLD_ARCH" = "amd64" ] && echo "x86_64" || echo "i386")
            TARGETNAME="/usr/lib/$ARCHNAME-linux-gnu/$FILENAME.$VERSION"
            
            sudo cp -f "$OUTDIR/$FILENAME" "$TARGETNAME"
            echo "==> $TARGETNAME"
        ;;
       
        *)
            return
        ;;
    esac
}

function nvidia-nvmake() {
    SECONDS=0
    TIMESTAMP=$(date +%s)
    STDOUT_FILE="$NVBLD_OUTPUT_DIR/LOG/NVMAKE.STDOUT"
    STDERR_FILE="$NVBLD_OUTPUT_DIR/LOG/NVMAKE.STDERR"
    mkdir -p "$NVBLD_OUTPUT_DIR/LOG/"
    cd "$NVBLD_NVSRC/$NVBLD_BRANCH"

    echo "NVIDIA NVMAKE: BEGIN: $(date)"
    echo "NVIDIA NVMAKE: $NVBLD_PLATFORM $NVBLD_ARCH $NVBLD_BUILD_TYPE $NVBLD_MODULES"
    echo "$TIMESTAMP" > "$NVBLD_LOCK_FILE"

    ionice -c2 nice \
    $NVBLD_NVSRC/sw/misc/linux/unix-build $NVBLD_UNIX_BUILD_ARGS \
    --tools "$NVBLD_NVSRC/sw/tools" \
    --devrel "$NVBLD_NVSRC/sw/devrel/SDK/inc/GL" \
    nvmake \
    NV_COLOR_OUTPUT=1 \
    NV_COMPRESS_THREADS=16 \
    NV_FAST_PACKAGE_COMPRESSION=1 \
    NV_EXCLUDE_BUILD_MODULES="$NVBLD_EXCLUDE_BUILD_MODULES" \
    NV_KEEP_UNSTRIPPED_BINARIES=1 \
    NV_GUARDWORD=0 \
    -j16 \
    $NVBLD_PLATFORM \
    $NVBLD_ARCH \
    $NVBLD_BUILD_TYPE \
    $NVBLD_MODULES \
    1> "$STDOUT_FILE" \
    2> "$STDERR_FILE" && (
        nvidia-changed; 
        nvidia-backup; 
        nvidia-install; 
        nvidia-deploy; 
    ) || (
        grep -E -i -w "fatal|error|errors|critical|failed|: \*\*\*" "$STDERR_FILE"; 
    )

    echo "NVIDIA NVMAKE: END: $(date) [COST: $(expr $SECONDS / 60) MINS]"
    echo ""
    rm -rf "$NVBLD_LOCK_FILE"
}

#############
## MAIN FUNC
#############

while [ -n "$1" ]; do
    case "$1" in
        help)
            echo "USAGE: nvidia-build [help] [NVBLD_ARCH] [NVBLD_BUILD_TYPE] [ppp] [sweep] [deploy MODULE] [install] [nickname NAME]"
            echo "    help: shows this message"
            echo "    [NVBLD_ARCH]: default value is $NVBLD_ARCH [amd64|x86]"
            echo "    [NVBLD_BUILD_TYPE]: default value is $NVBLD_BUILD_TYPE [debug|release|develop]"
            echo "    ppp: post-process-packages"
            echo "    sweep: sweep"
            echo "    deploy MODULE: deploy nvidia module to local host"
            echo "    install: run installer on local host"
            echo "    nickname NAME: append NAME to final output filename"
            exit 0
        ;;

        amd64)
            NVBLD_ARCH=amd64
        ;;

        x86)
            NVBLD_ARCH=x86
        ;;

        release)
            NVBLD_BUILD_TYPE=release
        ;;

        debug) 
            NVBLD_BUILD_TYPE=debug
        ;;

        develop)
            NVBLD_BUILD_TYPE=develop
        ;;

        sweep)
            NVBLD_MODULES=sweep
        ;;

        ppp)
            NVBLD_PPP=1
            NVBLD_MODULES="post-process-packages dist"
            if [ -z "$NVBLD_NICKNAME" ]; then
                NVBLD_NICKNAME="PPP"
            fi
        ;;
        
        deploy)
            shift
            NVBLD_DEPLOY="$1"
        ;;
        
        install)
            NVBLD_INSTALL=1
        ;;
        
        nickname)
            shift
            NVBLD_NICKNAME="$1"
        ;;
    
        *)
            echo "ERROR: UNKNOWN ARGUMENT: $1" > /dev/stderr
            nvidia-build help
            exit 1
        ;;
    esac
    shift
done

if [ -f "$NVBLD_LOCK_FILE" ]; then
    echo "ERROR: FILE $NVBLD_LOCK_FILE EXISTS" > /dev/stderr
    exit 1
fi

if [ -z "$NVBLD_NVSRC" ]; then
    echo "ERROR: NVBLD_NVSRC IS NOT DEFINED" > /dev/stderr
    exit 1
fi

if [ -z "$NVBLD_BRANCH" ]; then
    echo "ERROR: NVBLD_BRANCH IS NOT DEFINED" > /dev/stderr
    exit 1
fi

if [ "$(stat -c '%U' $NVBLD_NVSRC/sw/misc/linux/unix-build)" != "root" ]; then
    NVBLD_UNIX_BUILD_ARGS=" --unshare-namespaces"
fi

nvidia-nvmake
