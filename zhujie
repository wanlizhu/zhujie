#!/bin/bash
# System
export ZHUJIE_URL="https://github.com/wanlizhu/zhujie.git"
export __GL_SYNC_TO_VBLANK=0
if [ -z "$DISPLAY" ]; then
    export DISPLAY=:0
fi

# NVIDIA tools
export P4V=$HOME/NVIDIA/P4V
export PIC_V=$HOME/NVIDIA/PIC-V
export PIC_G=$HOME/NVIDIA/PIC-G
export NGFX=$HOME/NVIDIA/Nsight_Graphics
export FLAMEGRAPH=$HOME/NVIDIA/Flamegraph
export APITRACE=$HOME/NVIDIA/APITrace

# Perforce
export P4USER=wanliz
export P4PASSWD=""
export P4ROOT=$HOME/NVIDIA/SRC_ON_P4
export P4PORT=p4proxy-zj.nvidia.com:2006
export P4IGNORE=$HOME/NVIDIA/P4IGNORE
case $(hostname) in
    nvidia-master)
        export P4CLIENT=nvidia-src-zhujie
    ;;
    nvidia-wingman)
        export P4CLIENT=nvidia-src-zhujie-wingman
    ;;
    *)
        export P4CLIENT=""
    ;;
esac
if [ "$P4CLIENT" != "" -a ! -f "$P4IGNORE" ]; then
    echo "_out/" >> "$P4IGNORE"
    echo ".git/" >> "$P4IGNORE" 
    echo ".gitignore" >> "$P4IGNORE"
fi

# IP
export IP_ROUTER=""
export IP_NVIDIA=""
export IP_ZEROTIER=""

export PATH="$HOME:$HOME/NVIDIA/zhujie:$APITRACE/build:$FLAMEGRAPH:$P4V/bin:$NGFX/host/linux-desktop-nomad-x64:$P4ROOT/sw/misc/linux:$P4ROOT/sw/automation/dvs/dvsbuild:$P4ROOT/sw/pvt/dleone/bin:$PATH"

for IP in $(ip -4 addr | grep -oP '(?<=inet\s)\d+(\.\d+){3}'); do
    if [[ "$IP" =~ ^192\.168\.192\..* ]]; then
        IP_ZEROTIER=$IP
    elif [[ "$IP" =~ ^192\.168\..* ]]; then
        IP_ROUTER=$IP
    fi
    
    if [[ "$IP" =~ ^10\.19\..* ]]; then
        IP_NVIDIA=$IP
    fi
done

function user-cancel() {
    echo ""
    popd > /dev/null
    exit 0
}

function check-display() {
    if [ -z "$DISPLAY" ]; then
        echo "Error: DISPLAY is not set" > /dev/stderr
        exit 1
    fi
}

function ram-size() {
    echo ""
}

function system-name() {
    echo ""
}

function xserver-info() {
    echo ""
}

function xwindow-info() {
    echo ""
}

function cpu-name() {
    echo ""
}

function cpu-physical-cores() {
    echo ""
}

function cpu-logical-cores() {
    echo ""
}

function cpu-prefetch() {
    echo ""
}

function gpu-name() {
    echo ""
}

function gpu-vram-size() {
    echo ""
}

function gpu-driver() {
    cat /proc/driver/nvidia/version
}

function opengl-version() {
    echo ""
}

function vulkan-version() {
    echo ""
}

function monitor-name() {
    echo ""
}

function monitor-resolution() {
    LINE=$(xdpyinfo | grep dimensions)
    echo "${LINE#  dimensions:    }"
}

function monitor-color-depth() {
    echo ""
}

function sysinfo() {
    echo "         System"
    echo "==============="
    echo "    OS Name: $(system-name)"
    echo "    Kernel: $(uname -r)"
    echo "    X Server: $(xserver-info)"
    echo "    X Window: $(xwindow-info)"
    echo "    CPU: $(cpu-name)"
    echo "    GPU: $(gpu-name)"
    echo "    RAM: $(ram-size)"
    echo ""
    
    echo "            CPU"
    echo "==============="
    echo "    Name: $(cpu-name)"
    echo "    Physical Cores: $(cpu-physical-cores)"
    echo "    Logical Cores: $(cpu-logical-cores)"
    echo "    Prefetch: $(cpu-prefetch)"
    echo ""
    
    echo "            GPU"
    echo "==============="
    echo "    Name: $(gpu-name)"
    echo "    VRAM: $(gpu-vram-size)"
    echo "    Driver: $(gpu-driver)"
    echo "    OpenGL API: $(opengl-version)"
    echo "    Vulkan API: $(vulkan-version)"
    echo "    Monitor: $(monitor-name)"
    echo "    Resolution: $(monitor-resolution)"
    echo "    Color Depth: $(monitor-color-depth)"
    echo ""
}

function init() { 
    # Basic tools
    sudo apt install -y openssh-server build-essential cmake sshfs vim net-tools pkg-config libglvnd-dev python3 openconnect steam libncurses-dev bison flex libssl-dev libelf-dev libxkbcommon-x11-dev screen mailutils xdotool p7zip-full wmctrl
    
    # Basic python tools
    python3 -m pip install steamctl
    python3 -m pip install mako
    
    # Linux perf tool
    sudo apt install linux-tools-generic -y
    sudo apt install linux-cloud-tools-generic -y
    sudo apt install linux-tools-`uname -r` -y
    sudo apt install linux-cloud-tools-`uname -r` -y
    if [ "$(cat /proc/sys/kernel/perf_event_paranoid)" != "-1" ]; then
        sudo sh -c "echo -1 > /proc/sys/kernel/perf_event_paranoid"
        sudo echo "kernel.perf_event_paranoid = -1" >> /etc/sysctl.conf
    fi
    
    # Requirements of building mesa
    sudo python3 -m pip install mako
    sudo apt install -y llvm wayland-protocols libwayland-egl-backend-dev libxcb-glx0 libxcb-glx0-dev libxcb-shm0 libxcb-shm0-dev libx11-xcb-dev libx11-xcb1 libxcb-dri2-0 libxcb-dri2-0-dev libxcb-dri3-0 libxcb-dri3-dev libxcb-present-dev libxcb-present0 librust-wayland-scanner-dev wayland-scanner++ libvdpau-dev libomxil-bellagio-dev libva-dev libdrm-dev libxext-dev libxfixes-dev libxshmfence-dev libxxf86vm-dev libxrandr-dev
    
    # Run sudo without password
    sudo bash -c "echo \"$USER ALL=(ALL) NOPASSWD: ALL\" >> /etc/sudoers"
    
    if [ "$1" = "-a" ]; then
        # GNOME
        gsettings set org.gnome.desktop.screensaver lock-enabled false
        gsettings set org.gnome.desktop.screensaver lock-delay 0
        gsettings set org.gnome.desktop.screensaver ubuntu-lock-on-suspend false
    
        # Zero Tier
        curl -s https://install.zerotier.com | sudo bash
        sudo systemctl enable zerotier-one.service
        sudo zerotier-cli join db64858fed3b37c1

        # CPolar
        read -p "CPolar Token: " TOKEN
        if [ "$TOKEN" != "" ]; then
            curl -L https://www.cpolar.com/static/downloads/install-release-cpolar.sh | sudo bash
            cpolar authtoken $TOKEN
            sudo systemctl enable cpolar
            sudo systemctl start cpolar
        fi
    fi
}

function pull() {
    if [ ! -d "$HOME/NVIDIA/zhujie" ]; then
        echo "Error: folder '$HOME/NVIDIA/zhujie' is missing, aborting..." > /dev/stderr
        exit 1
    fi
    
    pushd "$HOME/NVIDIA/zhujie" > /dev/null
    git pull $ZHUJIE_URL master
    popd > /dev/null 
    
    source "$HOME/NVIDIA/zhujie/zhujie"
}

function push() {
    if [ ! -d "$HOME/NVIDIA/zhujie" ]; then
        echo "Error: folder '$HOME/NVIDIA/zhujie' is missing, aborting..." > /dev/stderr
        exit 1
    fi
    
    pushd "$HOME/NVIDIA/zhujie" > /dev/null
    du -sh * | sort -rh
    echo ""

    trap user-cancel INT
    read -r -n 1 -p "Press [ENTER] to continue or CTRL-C to cancel: "
    echo ""
    
    git add .
    git commit -m "$(date)"
    git push --set-upstream $ZHUJIE_URL master
    popd > /dev/null
}

function nvmake() {
    MODULE="$1"
    ARCH="$2"
    BUILD_TYPE="$3"
    NVBRANCH="sw/dev/gpu_drv/dev_a"
    
    if [ -z "$P4ROOT" ]; then
        echo "Error: ENVVAR P4ROOT is missing or incorrect, aborting..." > /dev/stderr
        exit 1
    fi

    if [ -z "$NVBRANCH" ]; then
        echo "Error: ENVVAR NVBRANCH is missing or incorrect, aborting..." > /dev/stderr
        exit 1
    fi
    
    if [ "$(stat -c '%U' $P4ROOT/sw/misc/linux/unix-build)" != "root" ]; then
        UNIX_BUILD_ARGS="--unshare-namespaces"
    else
        UNIX_BUILD_ARGS=""
    fi
    
    case "$MODULE" in
        dev_a)
            MODULE="drivers dist"
        ;;
        
        opengl)
            echo xxx
            exit 1
        ;;
        
        ppp)
            MODULE="post-process-packages dist"
        ;;
        
        sweep)
            CWD_BAK=`pwd`
            cd "$P4ROOT/$NVBRANCH"
            
            $P4ROOT/sw/misc/linux/unix-build $UNIX_BUILD_ARGS \
            --tools "$P4ROOT/sw/tools" \
            --devrel "$P4ROOT/sw/devrel/SDK/inc/GL" \
            nvmake sweep
            
            cd $CWD_BAK
            return 0
        ;;
        
        *)
            echo "Error: NVIDIA module '$MODULE' is not supported, aborting..." > /dev/stderr
            exit 1
        ;;
    esac
    
    echo "NVMake: linux $MODULE $ARCH $BUILD_TYPE"
    mkdir -p "$HOME/NVIDIA/OUT/"
    
    ERRORCODE=0
    SECONDS=0
    CWD_BAK=`pwd`
    cd "$P4ROOT/$NVBRANCH"
    
    $P4ROOT/sw/misc/linux/unix-build $UNIX_BUILD_ARGS \
    --tools "$P4ROOT/sw/tools" \
    --devrel "$P4ROOT/sw/devrel/SDK/inc/GL" \
    nvmake \
    NV_COLOR_OUTPUT=1 \
    NV_COMPRESS_THREADS=16 \
    NV_FAST_PACKAGE_COMPRESSION=1 \
    NV_EXCLUDE_BUILD_MODULES="" \
    NV_KEEP_UNSTRIPPED_BINARIES=1 \
    NV_GUARDWORD=0 \
    -j16 \
    linux \
    $ARCH \
    $BUILD_TYPE \
    $MODULE \
    1> "$HOME/NVIDIA/OUT/nvmake.stdout.log" \
    2> "$HOME/NVIDIA/OUT/nvmake.stderr.log" && (
        echo xxx
    ) || (
        grep -E -i -w "fatal|error|errors|critical|failed|: \*\*\*" "$HOME/NVIDIA/OUT/nvmake.stderr.log";
        ERRORCODE=1 
    )

    echo "NVMake: time cost: $(expr $SECONDS / 60) mins"
    echo ""

    cd "$CWD_BAK"
    return $ERRORCODE
}

function build() {
    if [ -z "$1" ]; then
        echo "Usage: zhujie build <dev_a|opengl|sweep|ppp> [ARCHS...] [TYPES...]" > /dev/stderr
        exit 1
    fi
    
    ARCHS=""
    BUILD_TYPES=""
    MODULES=""
    
    while [ -n "$1" ]; do
        case "$1" in
            amd64)
                ARCHS="$ARCHS amd64"
            ;;

            x86)
                ARCHS="$ARCHS x86"
            ;;

            release)
                BUILD_TYPES="$BUILD_TYPES release"
            ;;

            debug) 
                BUILD_TYPES="$BUILD_TYPES debug"
            ;;

            develop)
                BUILD_TYPES="$BUILD_TYPES develop"
            ;;

            sweep)
                nvmake sweep * *
                return 0
            ;;

            ppp)
                nvmake ppp * *
                return 0
            ;;
            
            dev_a)
                MODULES="$MODULES dev_a"
            ;;
            
            opengl)
                MODULES="$MODULES opengl"
            ;;
    
            *)
                echo "Error: unknown argument '$1', aborting..." > /dev/stderr
                build
                exit 1
            ;;
        esac
        shift
    done
    
    if [ -z "$ARCHS" ]; then
        ARCHS="amd64"
    fi

    if [ -z "$BUILD_TYPES" ]; then
        BUILD_TYPES="release"
    fi
    
    for MODULE in $MODULES; do
        for ARCH in $ARCHS; do
            for BUILD_TYPE in $BUILD_TYPES; do
                nvmake "$MODULE" "$ARCH" "$BUILD_TYPE"
            done
        done
    done    
}

function install() {
    if [ "$1" = "" ]; then
        echo "Usage: zhujie install [OPTIONS]" > /dev/stderr
        echo "    e.g. zhujie install <INSTALLER_PATH>" > /dev/stderr
        echo "    e.g. zhujie install <MODULE> <ARCH> <BUILD_TYPE>" > /dev/stderr
        echo "    e.g. zhujie install <-r|--revert> <ARCH>" > /dev/stderr
        echo "    e.g. zhujie install mesa [version]" > /dev/stderr
        exit 1
    fi
    
    while [ -n "$1" ]; do
        case "$1" in
            opengl)
                shift
                update-libs opengl $@
                break
            ;;

            -r|--revert)
                shift
                revert-libs $@
                break
            ;;
            
            mesa)
                echo xxx
                exit 1
                glxinfo | grep "OpenGL renderer"
                break
            ;;
            
            mainline)
                sudo add-apt-repository ppa:cappelikan/ppa
                sudo apt update
                sudo apt install mainline
                which mainline    
            ;;
            
            gtlfs)
                wget https://gtlfs.nvidia.com/client/linux -O ~/gtlfs
                chmod +x ~/gtlfs
            ;;
    
            *)
                if [ -f "$1" -o -L "$1" ]; then
                    run-installer "$1"
                    break
                else
                    echo "Error: NVIDIA installer '$1' is missing, aborting..." > /dev/stderr
                    exit 1
                fi
            ;;
        esac
        shift
    done
}

function remove() {
    if [ "$1" = "" ]; then
        echo "Usage: zhujie remove [OPTIONS]" > /dev/stderr
        echo "    e.g. zhujie remove mesa" > /dev/stderr
        exit 1
    fi
    
    case "$1" in
        mesa)
            echo xxx
            exit 1
        ;;
        
        mainline)
            sudo add-apt-repository --remove ppa:cappelikan/ppa
            sudo apt remove mainline
        ;;
        
        gtlfs)
            rm -rf ~/gtlfs
        ;;
        
        *)
            echo "Error: can't remove '$1', aborting..." > /dev/stderr
            exit 1
        ;;
    esac
}

function run-installer() {
    if [ "$1" = "" ]; then
        echo "Usage: zhujie install <INSTALLER_PATH>" > /dev/stderr
        exit 1
    fi
    
    INSTALLER="$1"
    if [ ! -f "$INSTALLER" ]; then
        echo "Error: NVIDIA installer '$INSTALLER' is missing, aborting..." > /dev/stderr
        exit 1
    fi

    sudo chmod +x "$INSTALLER"

    echo "Info: install NVIDIA driver '$INSTALLER'"
    who am i > /dev/null && (
        sudo systemctl isolate multi-user
        sudo "$INSTALLER" -sb
        sudo systemctl isolate graphical
    ) || (
    	echo "Error: can't run NVIDIA installer locally, aborting..." > /dev/stderr
        exit 1
    )	
}

function revert-libs() {
    if [ "$1" = "" ]; then
        echo "Usage: zhujie install <-r|--revert> <ARCH>" > /dev/stderr
        exit 1
    fi

    ARCH="$1" && shift
    ARCHNAME=$([ "$ARCH" = "amd64" ] && echo "x86_64" || echo "i386")
    FOLDER="/usr/lib/$ARCHNAME-linux-gnu"

    for FILE in `ls $FOLDER/*.backup`; do
        sudo mv -f "$FILE" "${FILE%.*}"
        echo "Reverted: ${FILE%.*}"
    done
}

function update-libs() {
    if [ "$1" = "" -o "$2" = "" -o "$3" = "" ]; then
        echo "Usage: zhujie install <MODULE> <ARCH> <BUILD_TYPE>" > /dev/stderr
        return 1
    fi

    MODULE="$1" && shift
    ARCH="$1" && shift
    BUILD_TYPE="$1" && shift 
    FOLDER="Linux_"$ARCH"_$BUILD_TYPE"

    if [ "$(nvidia-source-version)" != "$(nvidia-version-installed $ARCH)" ]; then  
        echo "Error: NVIDIA modules are version locked, can't overwrite *.so.$(nvidia-version-installed $ARCH) with *.so.$(nvidia-source-version), aborting..." > /dev/stderr
        exit 1
    fi

    echo "Info: install NVIDIA module [$MODULE $ARCH $BUILD_TYPE]"
    case "$MODULE" in
        opengl)
            FOLDER="Linux_"$ARCH"_$BUILD_TYPE"
            OUTDIR="$P4ROOT/$NVBRANCH/drivers/OpenGL/_out/$FOLDER"
            BASENAMES="libnvidia-glcore.so"
            for BASENAME in $BASENAMES; do
                VERSION=$(nvidia-source-version)
                ARCHNAME=$([ "$ARCH" = "amd64" ] && echo "x86_64" || echo "i386")
                TARGETNAME="/usr/lib/$ARCHNAME-linux-gnu/$BASENAME.$VERSION"
            
                if [ -f "$TARGETNAME" -o -L "$TARGETNAME" ]; then
                    if [ ! -f "$TARGETNAME.backup" ]; then
                        sudo mv "$TARGETNAME" "$TARGETNAME.backup"
                    fi
                    sudo cp -f "$OUTDIR/$BASENAME" "$TARGETNAME"
                else
                    echo "Error: '$TARGETNAME' is missing, aborting..." > /dev/stderr
                    exit 1
                fi

                echo "Backup & Update: $TARGETNAME"
            done
        ;;

        *)
            echo "Error: NVIDIA module '$MODULE' is not supported, aborting..." > /dev/stderr
            exit 1
        ;;
    esac 
}

function nvidia-source-version() {
    echo `grep '^#define NV_VERSION_STRING' $P4ROOT/$NVBRANCH/drivers/common/inc/nvUnixVersion.h  | awk '{print $3}' | sed 's/"//g'`
}

function nvidia-version-installed() {
    if [ "$1" = "" ]; then
        echo "Usage: nvidia-version-installed <ARCH>" > /dev/stderr
        exit 1
    fi

    ARCH="$1"
    ARCHNAME=$([ "$ARCH" = "amd64" ] && echo "x86_64" || echo "i386")
    SOFILE=$(ls /usr/lib/$ARCHNAME-linux-gnu/libnvidia-glcore.so* | head -n 1)
    POS=$([ "$ARCH" = "amd64" ] && echo "46" || echo "44")
    LEN=$(( ${#SOFILE} - POS ))
    VERSION="${SOFILE:$POS:$LEN}"

    if [ -f "/usr/lib/$ARCHNAME-linux-gnu/libnvidia-glvkspirv.so.$VERSION" ]; then
        echo "$VERSION"
    else
        echo "Error: can't parse NVIDIA version installed, aborting..." > /dev/stderr
        exit 1
    fi
}

function ddnet() {
    # 2560x1440
    # Fullscreen
    # Vulkan
    # Default
    # RaiNyMore2 -- GPU-intensive 

    check-display
    
    (echo 7; echo 2; echo 1; echo 1; echo 2; echo n) | phoronix-test-suite benchmark pts/ddnet
}

function talos() {
    # Vulkan
    # 2560x1440
    
    check-display

    # Launch steam if it's not currently running
    pgrep -x steam >/dev/null && echo "Info: steam is running..." || (
        steam &
        sleep 15
    )

    if [ ! -f "$HOME/.steam/steam/steamapps/common/The Talos Principle/Bin/x64/Talos" ]; then
        echo "Error: install 'Talos Principle' in steam's window and try again, aborting..." > /dev/stderr
        exit 1
    fi

    CWD_BAK="$(pwd)"
    cd "$HOME/.steam/steam/steamapps/common/The Talos Principle/Bin/x64"
    rm -rf $HOME/zhujie-talos.log
    echo "Info: ./Talos 2560x1440 is running..."
    ./Talos +gfx_strAPI VLK +gfx_pixResWidth 2560 +gfx_pixResHeight 1440 +exec $HOME/.phoronix-test-suite/installed-tests/pts/talos-principle-1.2.1/talos-run-test.lua > $HOME/zhujie-talos.log
    cd "$CWD_BAK"
}

function driver() {
    if [ -z "$1" ]; then
        echo "Usage: zhujie driver [dev_a [CL|current]] [public [release_id|current][:dev]] [-i]" > /dev/stderr
        echo "    e.g. zhujie driver dev_a CL" > /dev/stderr
        echo "    e.g. zhujie driver dev_a current" > /dev/stderr
        echo "    e.g. zhujie driver public RELEASE_ID" > /dev/stderr
        echo "    e.g. zhujie driver public RELEASE_ID:dev" > /dev/stderr
        exit 1
    fi

    URL=""
    OUT=""
    INSTALL=0
    DVSBUILD_DOWNLOADS="$HOME/NVIDIA/OUT/Drivers"
    mkdir -p "$DVSBUILD_DOWNLOADS"
    
    while [ -n "$1" ]; do
        case "$1" in
            -i|--install)
                INSTALL=1
            ;;
            
            dev_a)
                shift
                if [ "$1" = "current" ]; then
                    echo xxx
                    exit 1
                else 
                    CL="$1"
                fi
                TYPE="Release"
                URL_PATCH="Release"
                URL_PATCH2=""
                if [[ $CL == *":dbg"* ]]; then
                    TYPE="Debug"
                    URL_PATCH="Debug"
                    URL_PATCH2="-internal"
                fi
                CL="${CL%:*}"
                URL="http://linuxqa.nvidia.com/dvsbuilds/gpu_drv_dev_a_${URL_PATCH}_Linux_AMD64_unix-build_Test_Driver/SW_$CL.0_gpu_drv_dev_a_${URL_PATCH}_Linux_AMD64_unix-build_Test_Driver.tgz/NVIDIA-Linux-x86_64-DVS${URL_PATCH2}.run"
                OUT="$DVSBUILD_DOWNLOADS/NVIDIA-dev_a-$TYPE-CL$CL.run"
                echo "Downloading: $OUT"
            ;;
            
            public)
                shift
                if [ "$1" = "current" ]; then
                    echo xxx
                    exit 1
                else
                    ID="$1"
                fi
                TYPE="Release"
                URL_PATCH=""
                if [[ $ID == *":dev"* ]]; then
                    TYPE="Develop"
                    URL_PATCH="/develop"
                fi
                ID="${ID%:*}"
                URL="http://linuxqa/builds/release/display/x86_64${URL_PATCH}/$ID/NVIDIA-Linux-x86_64-$ID.run"
                OUT="$DVSBUILD_DOWNLOADS/NVIDIA-Public-$TYPE-$ID.run"
                echo "Downloading: $OUT"
            ;;
        esac
        shift
    done
    
    if [ "$URL" = "" -o "$OUT" = "" ]; then
        driver
        exit 1
    fi
    
    if [ -f "$OUT" ]; then
        echo "Reuse cache: $OUT"
        chmod 777 "$OUT" 
    else
        wget $URL -O "$OUT" && (
            chmod 777 "$OUT" 
        ) || (
            INSTALL=0
        )
    fi
    
    if [ "$INSTALL" = "1" ]; then
        install "$OUT"
    fi
}

function flamegraph() {
    if [ -z "$1" ]; then
        echo "Usage: zhujie flamegraph [--pid PID] [--sleep SEC]" > /dev/stderr
        echo "    --pid PID: record callstacks of PID only (default is system-wide recording)" > /dev/stderr
        echo "    --sleep SEC: record for SEC seconds" > /dev/stderr
        exit 1
    fi
    
    TIMESTAMP=$(date +%s)
    OUT="$HOME/NVIDIA/OUT/flamegraph"
    SVG_FILE="$OUT/perf-$TIMESTAMP.svg"
    PERF_DATA="$OUT/perf-$TIMESTAMP.data"
    PERF_RECORD_SYSTEM_WIDE=1
    PERF_RECORD_PID=" -a "
    PERF_RECORD_SECONDS=10
    PERF_RECORD_ARGS=" -F 100 -g --call-graph dwarf "
    SUDO="sudo"
    
    while [ -n "$1" ]; do
        case "$1" in
            --pid)
                shift
                PERF_RECORD_SYSTEM_WIDE=0
                PERF_RECORD_PID=" --pid=$1 "
                SUDO=""
            ;;

            --sleep)
                shift
                PERF_RECORD_SECONDS=$1
            ;;

            *)
	            flamegraph
	            exit 1
            ;;
        esac
        shift
    done
    
    if [ ! -d "$FLAMEGRAPH" ]; then
        echo "Error: ENVVAR FLAMEPATH is missing or incorrect, aborting..." > /dev/stderr
        exit 1
    fi
    
    if [ ! -f "$PERF_DATA" ]; then
        echo "Run perf record:"
        echo "    Output: $PERF_DATA"
        echo "    Sleep: $PERF_RECORD_SECONDS SECONDS"
        echo "    PID: $([[ $PERF_RECORD_SYSTEM_WIDE -ne 0 ]] && echo \"[SYSTEM WIDE]\" || echo \"$PERF_RECORD_PID\")"
        echo "    Other: $PERF_RECORD_ARGS"
        echo ""

        mkdir -p "$OUT"
        $SUDO perf record $PERF_RECORD_PID $PERF_RECORD_ARGS --output="$PERF_DATA" -- sleep $PERF_RECORD_SECONDS

        if [ ! -z "$SUDO" ]; then
            sudo  chmod 777 "$PERF_DATA"
        fi
    fi
    
    if [ ! -f "$PERF_DATA" ]; then
        echo "Error: perf data file '$PERF_DATA' is missing, aborting..." > /dev/stderr
        exit 1
    fi
    
    echo "Generate flamegraph SVG (Zoom and Search):"
    echo "    Perf data: $PERF_DATA"
    echo "    SVG file: $SVG_FILE"
    echo ""
    BASENAME=$(basename -- "$PERF_DATA")
    
    perf script \
        --input="$PERF_DATA" \
        1> "/tmp/$BASENAME.perf" \
        2> "/tmp/$BASENAME.perf.error"
    
    if [ ! -f "/tmp/$BASENAME.perf" ]; then
        cat "/tmp/$BASENAME.perf.error"
        exit 1
    fi
    
    "$FLAMEGRAPH/stackcollapse-perf.pl" \
        "/tmp/$BASENAME.perf" \
        1> "/tmp/$BASENAME.perf.folded" \
        2> "/tmp/$BASENAME.perf.folded.error"
    
    if [ ! -f "/tmp/$BASENAME.perf.folded" ]; then
        cat "/tmp/$BASENAME.perf.folded.error"
        exit 1
    fi
    
    "$FLAMEGRAPH/stackcollapse-recursive.pl" \
       "/tmp/$BASENAME.perf.folded" \
       1> "/tmp/$BASENAME.perf.folded.recursive" \
       2> "/tmp/$BASENAME.perf.folded.recursive.error"
    
    if [ ! -f "/tmp/$BASENAME.perf.folded.recursive" ]; then
        cat "/tmp/$BASENAME.perf.folded.recursive.error"
        exit 1
    fi
    
    "$FLAMEGRAPH/flamegraph.pl" \
       "/tmp/$BASENAME.perf.folded.recursive" \
       > "$SVG_FILE" || (
           echo "Error: can't generate SVG file, aborting..." > /dev/stderr
           exit 1
       )
}

function fuji() {
    while [ -n "$1" ]; do
        case "$1" in
            rename)
                shift
                fuji-rename "$@"
                break
            ;;
            
            sync)
                shift
                fuji-sync "$@"
                break
            ;;

            *)
                echo "Usage: zhujie fuji [rename ...] [sync]" > /dev/stderr
	            exit 1
            ;;
        esac
        shift
    done
}

function fuji-rename() {
    FOLDER="$1"
    OLDSTR="$2"
    NEWSTR="$3"

    IFS=$'\n' 
    for FILE in `find "$FOLDER" -type f -name "$OLDSTR*" -printf '%p\n'`; do
        NEWFILE=`echo "$FILE" | sed "s/\(.\{4\}\)\([0-9]\{4\}\)\.\(.*\)/$NEWSTR\2.\3/g"`
        if [ -f "$NEWFILE" ]; then
            echo "Error: dest file '$NEWFILE' exists, aborting..." > /dev/stderr
            exit 1
        fi
        
        mv "$FILE" "$NEWFILE"
        echo "Renamed: `basename \"$FILE\"` ==> `basename \"$NEWFILE\"`"
    done
    IFS=
}

function fuji-sync() {
    echo ""    
}

function nvlibs() {
    if [ -z "$1" ]; then
        echo "Usage: zhujie nvlibs [opengl] [-f|--filter]" > /dev/stderr
        exit 1
    fi
    
    NVBRANCH="sw/dev/gpu_drv/dev_a"
    FLAG_ALL=0
    FILTER=""
    
    while [ -n "$1" ]; do
        case "$1" in
            opengl)
                FOLDER="$P4ROOT/$NVBRANCH/drivers/OpenGL"
            ;;
            
            -f|--filter)
                shift
                FILTER="$1"
            ;;
            
            *)
                nvlibs
                exit 1
            ;;
        esac
        shift
    done
    
    if [ ! -d "$FOLDER" ]; then
        FOLDER="$P4ROOT/$NVBRANCH"
    fi
    
    echo "" > /tmp/nvinfo.libs
    find "$FOLDER" -type f -name "*.so" > "/tmp/nvinfo.libs" && (
        while read LINE; do
            if [ ! -z "$FILTER" ]; then
                if [[ $LINE == *"$FILTER"* ]]; then
                    echo "${LINE/$P4ROOT\/$NVBRANCH\//''}"
                fi
            else
                echo "${LINE/$P4ROOT\/$NVBRANCH\//''}"
            fi
        done < "/tmp/nvinfo.libs"
    ) || (
        echo "Error: can't find NVIDIA libs in folder '$FOLDER'" > /dev/stderr
        exit 1
    )
}

function p4bisect() {
    if [ "$1" = "" -o "$2" = "" -o "$3" = "" ]; then
        echo "Usage: p4bisect <dev_a|opengl> <DATE_OLD> <DATE_NEW>" > /dev/stderr
        exit 1
    fi
    
    MODULE="$1"
    DATE_OLD="$2"
    DATE_NEW="$3"
    OUT="$HOME/NVIDIA/OUT/p4bisect"
    CHANGES="$_OUT/changes-on-$MODULE"

    case "$MODULE" in
        dev_a)
            FOLDER="$P4ROOT/sw/dev/gpu_drv/dev_a"
        ;;
        opengl)
            FOLDER="$P4ROOT/sw/dev/gpu_drv/dev_a/drivers/OpenGL"
        ;;
        *)
            echo "Error: NVIDIA module '$1' is not supported, aborting..." > /dev/stderr
            exit 1
        ;;
    esac 
    
    p4 changes -s submitted $FOLDER/...@$DATE_OLD,@$DATE_NEW > "$CHANGES"
    LINE_COUNT=$(wc -l < "$CHANGES")
   
    while [ $LINE_COUNT -gt 2 ]; do
        LINE_NO=$(( $LINE_COUNT/2 ))
        LINE=$(sed -n "${LINE_NO}p" $CHANGES)

        IFS=" " read -ra SEGMENTS <<< "$LINE"
        CL="${SEGMENTS[1]}"
        DESC=$(p4 describe -s $CL | head -n 1)
    
        IFS=" " read -ra SEGMENTS <<< "$DESC"
        DATE="${SEGMENTS[5]}:${SEGMENTS[6]}"
        ANSWERED=0

        echo "Testing change $CL @$DATE (out of $LINE_COUNT changes):"

        ANSWERED=0
        while [ "$ANSWERED" = "0" ]; do
            read -p "    Download from DVS build? (Y/n): " ANS_DOWNLOAD
            case "$ANS_DOWNLOAD" in
                y|Y|1)
                    ANSWERED=1
                    driver $CL 
                ;;
                n|N|0)
                    ANSWERED=1
                ;;
            esac
        done

        ANSWERED=0
        while [ "$ANSWERED" = "0" ]; do
            read -p "    Is this change new? (y/n): " ANS_NEW 
            case "$ANS_NEW" in
                y|Y|1)
                    ANSWERED=1
                    DATE_NEW="$DATE"
                ;;
                n|N|0)
                    ANSWERED=1
                    DATE_OLD="$DATE"
                ;;
            esac
        done

        p4 changes -s submitted $FOLDER/...@$DATE_OLD,@$DATE_NEW > "$CHANGES"
        LINE_COUNT=$(wc -l < "$CHANGES")
        echo ""
    done
}

function pic-v() {
    if [ -z "$1" ]; then
        echo "Usage: zhujie pic-v [APP]" > /dev/stderr
        exit 1
    fi

    if [ ! -d "$PIC_V" ]; then
        echo "Error: ENVVAR PIC_V is missing or incorrect, aborting..." > /dev/stderr
        exit 1
    fi

    # Launch pic-v if it's not running
    pgrep -x pic-v >/dev/null && echo "PIC-V is running..." || (
        gnome-terminal -- bash -c "cd $PIC_V && ./pic-v || read -p \"Press any key to continue...\""
        sleep 3
    )

    # Launch game in current terminal 
    cd $PIC_V
    source setup-env.sh
    "$@" && (
        # Launch http server if it's not running
        ps aux | grep "[p]ython3 -m http.server" && echo "PIC-V HTTP server is running..." || (
            gnome-terminal -- bash -c "cd $PIC_V/PerfInspector/output && ./launch-py3-server.sh || read -p \"Press any key to continue...\""
            sleep 1
        )
    
        URL="http://localhost:8000/"
        which firefox && firefox $URL || ( 
            which chromium && chromium $URL || echo "Open http://localhost:8000/ in your browser" 
        )
    )
}

function vpn() {
    VPNURL="https://ngvpn32.vpn.nvidia.com:8443"
    AUTHGROUP="--authgroup Employee"
    USERNAME="-u wanliz"
    CODE1="Xavier#35224047"
    CODE2="$1"
    
    if [ -z "$CODE2" ]; then
        read -p "DUO pass code:" CODE2
    fi
    
    echo "$CODE1,$CODE2" | sudo openconnect $AUTHGROUP $USERNAME $VPNURL
}

function use-kernel() {
    echo "Found installed kernel:"
    COUNT=0
    for K in $(find /boot -name vmlinuz-* 2> /dev/null); do
        echo "[$COUNT]" ${K:14:$[${#K}-14]}
        COUNT=$((COUNT+1))
    done
    
    read -p "Set a kernel as default: " KNAME
    
    if [[ "$KNAME" =~ ^[0-9]+$ ]]; then
        INDEX=0
        for K in $(find /boot -name vmlinuz-* 2> /dev/null); do
            if [ "$INDEX" = "$KNAME" ]; then
                KNAME="${K:14:$[${#K}-14]}"
                break
            else
                INDEX=$((INDEX+1))
            fi
        done
    fi
    
    INVALID=1
    for K in $(find /boot -name vmlinuz-* 2> /dev/null); do
        if [ "${K:14:$[${#K}-14]}" = "$KNAME" ]; then
            INVALID=0
            break
        fi
    done
    
    if [ "$INVALID" = "1" ]; then
        echo "Error: kernel name '$KNAME' is invalid, aborting..." > /dev/stderr
        exit 1
    fi
    
    rm -rf "/tmp/grub.tmp"
    while read -r LINE; do
        if [[ "$LINE" == *"GRUB_DEFAULT"* ]]; then
            echo "GRUB_DEFAULT=\"Advanced options for Ubuntu>Ubuntu, with Linux $KNAME\"" >> "/tmp/grub.tmp"
        else
            echo "$LINE" >> "/tmp/grub.tmp"
        fi
    done < "/etc/default/grub"
    
    sudo cp "/tmp/grub.tmp" "/etc/default/grub"
    sudo update-grub
}

function stddev() {
    FILE="$1"
    if [ ! -f "$FILE" ]; then
        echo "Error: input file '$FILE' doesn't exist, aborting..." > /dev/stderr
        exit 1
    fi
    
    CMD=$(printf "
import statistics as stat
data=[]
with open(\"$FILE\", \"r\") as file:
    for line in file.readlines():
        data.append(float(line))
print(stat.stdev(data))")
    python3 -c "$CMD"
}

function mean() {
    FILE="$1"
    if [ ! -f "$FILE" ]; then
        echo "Error: input file '$FILE' doesn't exist, aborting..." > /dev/stderr
        exit 1
    fi
    
    CMD=$(printf "
import statistics as stat
data=[]
with open(\"$FILE\", \"r\") as file:
    for line in file.readlines():
        data.append(float(line))
print(stat.mean(data))")
    python3 -c "$CMD"
}

function is-nvidia-gpu() {
    LINE=$(lspci | grep NVIDIA)
    if [ "$LINE" = "" ]; then
        echo 0
    else
        echo 1
    fi
}

function fake-display() {
    if [ "$EUID" -ne 0 ]; then
        echo "Error: please run as root, aborting" > /dev/stderr
        exit 1
    fi

    RESOLUTION="$1"
    if [ "$(is-nvidia-gpu)" = "1" ]; then
        if [ "$RESOLUTION" = "" ]; then
            echo "Usage: zhujie fake-display [RESOLUTION]" > /dev/stderr
            echo "    RESOLUTION: the format is like 3840x2160, only required for NVIDIA GPU to fake a display, and is not required for AMD GPU as there is always a physical monitor connected for AMD GPU" > /dev/stderr
            echo ""
            read -p "Use the default resolution, 3840x2160? (Y/n): " ANS
            case "$ANS" in
                ""|y|Y|1)
                    RESOLUTION="3840x2160"
                ;;
                *)
                    echo "Error: input is illegal, aborting..." > /dev/stderr
                    exit 1
                ;;
            esac
        fi
    else
        RESOLUTION=""
        unset NVTEST_DRIVER_DIR
    fi
    
    if [ "$(is-nvidia-gpu)" = "1" ]; then
        /mnt/linuxqa/nvt.sh ${RESOLUTION}__runcmd --cmd 'sleep 100000000'
    else
        /mnt/linuxqa/nvt.sh runcmd --cmd 'sleep 100000000'
    fi
}

function vnc() {
    CMD="$1"
    ACTUAL_DISPLAY="$2"
    VNCCMD=""
    VNCPORT="5900"
    RESOLUTION=""
    
    if [ -z "$CMD" ]; then
        echo "Usage: zhujie vnc <start|stop|restart|status> [ACTUAL_DISPLAY] [RESOLUTION]" > /dev/stderr
        echo "    start: start VNC server on ACTUAL_DISPLAY, or a new virtual display" > /dev/stderr 
        echo "    stop: stop VNC server on ACTUAL_DISPLAY, or all VNC servers" > /dev/stderr
        echo "    restart: restart VNC server on ACTUAL_DISPLAY, fallback to 'start' if it doesn't exist" > /dev/stderr
        echo "    status: show status of the VNC server on ACTUAL_DISPLAY, or all VNC servers" > /dev/stderr
        echo "    ACTUAL_DISPLAY: work on the actual display" > /dev/stderr
        echo "    RESOLUTION: like 3840x2160, only required when create a new virtual display" > /dev/stderr
        echo "" > /dev/stderr
        echo "/usr/bin/x0vncserver, where x0 means X session at display :0, is a simplified version of the standard /usr/bin/vncserver, x0vncserver doesn't create a virtual display, instead it just shares the actual X session at display :0 or an actual display you specified. The default port is $RFBPORT. If you want to change it, just define environment variable VNCPORT=xxx to whatever port you want the VNC server to listen to. Xvnc is started by vncserver/x0vncserver, Xvnc is actually two things together because it's an X server for local application and a VNC server for remote application." > /dev/stderr
        echo "" > /dev/stderr
        exit 1
    fi
    
    if [ -z "$ACTUAL_DISPLAY" ]; then
        VNCCMD=vncserver
        if [ -z "$RESOLUTION" -a "$CMD" = "start" ]; then
            read -p "Virtual display resolution: (empty for 3840x2160) " ANS
            case "$ANS" in 
                "") RESOLUTION="-geometry 3840x2160" ;;
                 *) RESOLUTION="-geometry $ANS" ;;
            esac
        fi
    else
        VNCCMD=x0vncserver
        RESOLUTION=""
    fi
    
    which vncserver > /dev/null || sudo apt install -y tigervnc-standalone-server 
    which x0vncserver > /dev/null || sudo apt install -y tigervnc-scraping-server 
    
    if [ ! -d "$HOME/.vnc" ]; then
        mkdir -p "$HOME/.vnc"
    fi
    
    if [ ! -f "$HOME/.vnc/passwd" -a "$CMD" = "start" ]; then
        echo "Creating ~/.vnc/passwd file..."
        vncpasswd || (
            echo "Error: can't generate VNC password at $HOME/.vnc/passwd, aborting..." > /dev/stderr
            exit 1
        )
    fi
    
    if [ ! -z "$VNCPORT" ]; then
        RFBPORT="-rfbport $VNCPORT"
    fi
            
    case "$CMD" in
        start)
            $VNCCMD -localhost no -PasswordFile $HOME/.vnc/passwd $RFBPORT $RESOLUTION $ACTUAL_DISPLAY
        ;;
        
        stop)
            $VNCCMD -kill $ACTUAL_DISPLAY
        ;;
        
        restart)
            vnc stop  $ACTUAL_DISPLAY
            vnc start $ACTUAL_DISPLAY
        ;;
        
        status)
            $VNCCMD -list $ACTUAL_DISPLAY
        ;;
        
        *)
            vnc
            exit 1
        ;;
    esac
}

function apexlegends() {
    if [ "$EUID" -ne 0 ]; then
        echo "Error: please run as root, aborting" > /dev/stderr
        exit 1
    fi
    
    check-display
    
    if [ "$(is-nvidia-gpu)" = "0" ]; then
        echo "Info: unset NVTEST_DRIVER_DIR for mesa driver"
        unset NVTEST_DRIVER_DIR
    fi
    
    /mnt/linuxqa/nvt.sh DxvkApexLegends --traces Apex_Legends_Ultra_3840x2160_1xAA_16xAF | tee $HOME/Apex_Legends_Ultra_3840x2160_1xAA_16xAF.log | grep "UNKN NUMB: dxvk-v[0-9]*.[0-9]*.[0-9]*-fps" | awk "{print $5}" || (
        cat $HOME/Apex_Legends_Ultra_3840x2160_1xAA_16xAF.log
    )
}

function catia() {
    if [ "$EUID" -ne 0 ]; then
        echo "Error: please run as root, aborting" > /dev/stderr
        exit 1
    fi
    
    check-display
    
    CWD_BAK="$(pwd)"
    cd "/root/nvt/tests/viewperf2020v3/viewperf2020"
    viewperf/bin/viewperf viewsets/catia/config/catia.xml -resolution 3840x2160 | tee $HOME/catia_3840x2160.log | grep "<Composite Score=" | grep -o '".*"' || (
        cat $HOME/catia_3840x2160.log
    )
    cd "$CWD_BAK"
}








case "$1" in
    help)
        echo "Usage: zhujie <CMD>" > /dev/stderr
        echo "    help: show this message" > /dev/stderr
        echo "    show-ip: show important IPs" > /dev/stderr
        echo "    init: install packages for develop environment" > /dev/stderr
        echo "    pull: pull the latest code from github" > /dev/stderr
        echo "    push: push local changes to github" > /dev/stderr
        echo "    ddnet: run phoronix test - ddnet" > /dev/stderr
        echo "    talos: run phoronix test - talos principle" > /dev/stderr
        echo "    build: build NVIDIA drivers" > /dev/stderr
        echo "    install: install NVIDIA drivers or packages" > /dev/stderr
        echo "    remove: remove packages" > /dev/stderr
        echo "    driver: download driver from DVS build" > /dev/stderr
        echo "    flamegraph: generate flamegraph SVG" > /dev/stderr
        echo "    fuji: fuji film tools" > /dev/stderr
        echo "    sysinfo: show system info" > /dev/stderr
        echo "    nvlibs: show NVIDIA libs in specified folder" > /dev/stderr
        echo "    prbisect: bisect P4 changes" > /dev/stderr
        echo "    pic-v: create PIC-V capture" > /dev/stderr
        echo "    vpn: connect to NVIDIA VPN" > /dev/stderr
        echo "    prime-run: force application to use NVIDIA GPU on laptop" > /dev/stderr
        echo "    use-kernel: set the default Linux kernel to boot into" > /dev/stderr
        echo "    stddev: calculate standard deviation" > /dev/stderr
        echo "    mean: calculate mean" > /dev/stderr
        echo "    fake-display: fake a display if there is no monitor connected" > /dev/stderr
        echo "    vnc: start/stop/status a VNC server" > /dev/stderr
        echo "    apexlegends: run nvtest DxvkApexLegends" > /dev/stderr
        echo "    catia: run viewperf test catia" > /dev/stderr
        echo "    display: show local and remote displays on this machine" > /dev/stderr
    ;;
    
    show-ip)
        echo "ROUTER IP: $IP_ROUTER"
        echo "NVIDIA IP: $IP_NVIDIA"
        echo "ZERO-TIER: $IP_ZEROTIER"
    ;;
    
    init)
        shift
        init "$@"
    ;;
    
    pull)
        shift
        pull "$@"
    ;;
    
    push)
        shift
        push "$@"
    ;;
    
    build)
        shift
        build "$@"
    ;;
    
    install)
        shift
        install "$@"  
    ;;
    
    remove)
        shift
        remove "$@"
    ;;
    
    ddnet)
        shift
        ddnet "$@"
    ;;
    
    talos)
        shift
        talos "$@"
    ;;
    
    driver)
        shift
        driver "$@"
    ;;
    
    framegraph)
        shift
        flamegraph "$@"
    ;;
    
    fuji)
        shift
        fuji "$@"
    ;;
    
    sysinfo)
        shift
        sysinfo "$@"
    ;;
    
    nvlibs)
        shift
        nvlibs "$@"
    ;;
    
    p4bisect)
        shift
        p4bisect "$@"
    ;;
    
    pic-v)
        shift
        pic-v "$@"
    ;;
    
    vpn)
        shift
        vpn "$@"
    ;;
    
    prime-run)
        shift
        export __NV_PRIME_RENDER_OFFLOAD=1
        export __GLX_VENDOR_LIBRARY_NAME=nvidia
        export __VK_LAYER_NV_optimus=NVIDIA_only
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
        if [ ! -f "$VK_ICD_FILENAMES" ]; then 
            export VK_ICD_FILENAMES=/etc/vulkan/icd.d/nvidia_icd.json
        fi
        exec "$@"
    ;;
    
    use-kernel)
        shift
        use-kernel "$@"
    ;;
    
    stddev)
        shift
        stddev "$@"
    ;;
    
    mean)
        shift
        mean "$@"
    ;;
    
    fake-display)
        shift
        fake-display "$@"
    ;;
    
    vnc)
        shift
        vnc "$@"
    ;;
    
    apexlegends)
        shift
        apexlegends "$@"
    ;;
    
    catia)
        shift
        catia "$@"
    ;;
    
    disable-e-cores)
        shift
        disable-e-cores "$@"
    ;;
    
    display)
        shift
        echo -ne "Local displays: " && (cd /tmp/.X11-unix && for x in X*; do echo -ne ":${x#X} "; done; echo)
        echo -ne "Remote displays: " && (netstat -lnt | awk 'sub(/.*:/,"",$4) && $4 >= 6000 && $4 < 6100 {
            printf ($1 == "tcp6" ? "ip6-localhost:" : "localhost:") ($4 - 6000) " "
        }'; echo)
        
        if [ ! -z "$1" ]; then
            echo "Info: export DISPLAY=$1"
            export DISPLAY=:$1
        fi
    ;;
esac
    
