#!/bin/bash

# System
export __GL_SYNC_TO_VBLANK=0
export PATH="$HOME:$HOME/bin:$HOME/.local/bin:$HOME/zhujie:$PATH"
export _1080P=1920x1080
export _1K=1280x1024
export _2K=2560x1440
export _4K=3840x2160
alias mysudo='sudo env "PATH=$PATH" "DISPLAY=$DISPLAY"'

# Add zhujie to PATH
which zhujie > /dev/null || (
    export PATH="$(dirname $0):$PATH"
)

# NVIDIA tools
export PATH="$HOME/NVIDIA_TOOLS:$PATH"
if [[ -d $HOME/NVIDIA_TOOLS ]]; then
    for SUBDIR in $(ls -F $HOME/NVIDIA_TOOLS | grep / | awk'{print substr($0, 1, length($0)-1)}'); do
        case $SUBDIR in
            PIC-V|PIC-G|flamegraph) 
                export PATH="$HOME/NVIDIA_TOOLS/$SUBDIR:$PATH" 
            ;;
            P4V)
                export PATH="$HOME/NVIDIA_TOOLS/P4V/bin:$PATH"
            ;;
            Nsight_Graphics)
                export PATH="$HOME/NVIDIA_TOOLS/Nsight_Graphics/host/linux-desktop-nomad-x64:$PATH"
            ;;
        esac
    done 
fi

# Perforce
case $(hostname) in
    nvidia-master) 
        export P4USER=wanliz
        export P4PASSWD=""
        export P4ROOT=$HOME/NVIDIA_SRC_P4SW
        export P4CLIENT=nvidia-src-zhujie 
        export P4PORT=p4proxy-zj.nvidia.com:2006
        export P4IGNORE=$HOME/NVIDIA_P4IGNORE
        export PATH="$P4ROOT/sw/misc/linux:$P4ROOT/sw/automation/dvs/dvsbuild:$P4ROOT/sw/pvt/dleone/bin:$PATH"
    ;;
    nvidia-wingman) 
        export P4USER=wanliz
        export P4PASSWD=""
        export P4ROOT=$HOME/NVIDIA_SRC_P4SW
        export P4CLIENT=nvidia-src-zhujie 
        export P4PORT=p4proxy-zj.nvidia.com:2006
        export P4IGNORE=$HOME/NVIDIA_P4IGNORE 
        export PATH="$P4ROOT/sw/misc/linux:$P4ROOT/sw/automation/dvs/dvsbuild:$P4ROOT/sw/pvt/dleone/bin:$PATH"
    ;;
esac

function on-user-cancel() {
    echo ""
    popd > /dev/null
    exit 0
}

function combine-file-lines() {
    INFILE=$1
    tr -d '\r' < "$INFILE" > /tmp/zhujie-combine-lines
    sed ':a;N;$!ba;s/\n/, /g' /tmp/zhujie-combine-lines | sed 's/\n$//g'
}

function check-display() {
    # if [[ -z $(ps aux | grep [X]org) ]]; then
    #     echo "Xorg is not running" > /dev/stderr
    #     read -p "Do you want to run a fake display? (Y/n): " RSVP
    #     case $RSVP in
    #         ""|y|Y|1)
    #             fake-display &
    #             echo "Sleep for 10 seconds waiting for fake display..."
    #             sleep 10
    #         ;;
    #         *) exit 1 ;;
    #     esac
    # fi

    NEEDS_DISPLAY=0
    if [[ -z $DISPLAY ]]; then
        echo "Error: DISPLAY is not set" > /dev/stderr
        NEEDS_DISPLAY=1
    fi

    glxinfo 1> /dev/null 2> /dev/null || (
        echo "Error: Unable to open display $DISPLAY" > /dev/stderr
        NEEDS_DISPLAY=1
    )

    if [[ $NEEDS_DISPLAY == 1 ]]; then
        read -p "What do you want to set to DISPLAY? (empty for :0) " RSVP
        case $RSVP in
            "") export DISPLAY=:0 ;;
             *) export DISPLAY=$RSVP ;;
        esac
    fi

    glxinfo 1> /dev/null 2> /dev/null || (
        echo "Error: Unable to open display $DISPLAY" > /dev/stderr
        exit 1
    )
}

function has-nvidia-gpu() { 
    [[ -n $(sudo lshw -class display | grep NVIDIA) ]] && echo 1 || echo 0
}

function has-amd-gpu() {
    [[ -n $(sudo lshw -class display | grep 'vendor: Advanced Micro Devices') ]] && echo 1 || echo 0
}

function has-intel-gpu() {
    [[ -n $(sudo lshw -class display | grep 'vendor: Intel') ]] && echo 1 || echo 0
}

function cpu() {
    # CPU Model Name
    echo -ne "CPU Model Name: " 
    lscpu | grep "Model name:" | awk -F "name:" '{print $2}' | awk '{$1=$1; print}'
    
    # lscpu --all --extended 
}

function gpu() {
    if [[ $(has-nvidia-gpu) == 1 ]]; then
        echo "NVIDIA GPU Attached"
        nvidia-smi-static
    elif [[ $(has-amd-gpu) == 1 ]]; then
        echo "AMD GPU Attached"
    elif [[ $(has-intel-gpu) == 1 ]]; then
        echo "Intel GPU Attached"
    fi
}

function nvidia-smi-static() {
    which nvidia-smi > /dev/null || (
        echo "Info: can't find nvidia-smi in PATH"
        exit 1
    )
    
    nvidia-smi --query | grep "Driver Version" | awk -F ":" '{print "NVIDIA Driver Version:" $2}'
    
    # NVIDIA RM Version 
    if [[ -f /proc/driver/nvidia/version ]]; then 
        cat /proc/driver/nvidia/version | head -n 1
    fi
    
    for INDEX in `seq 0 $(($GPU_COUNT-1))`; do
        if [[ $INDEX > 0 ]]; then
            echo ""
        fi
        
        nvidia-smi -L | awk -F '\(UUID:' '{print $1}' | awk  "NR==$(($INDEX+1)){ print; exit; }"
        nvidia-smi --query --id=$INDEX --display=UTILIZATION | grep "Gpu" | awk '{ print "GPU Usage: " $3 $4 }'
        nvidia-smi --query --id=$INDEX --display=POWER | grep "Current Power Limit" | awk '{ print "Current Power Limit: " $5 $6 }'
        nvidia-smi --query --id=$INDEX --display=MEMORY | grep "Total" | head -n1 | awk '{ print "Total VRAM: " $3 $4 }'
        nvidia-smi --query --id=$INDEX --display=CLOCK | grep "Graphics" | awk 'NR==4{ print "Max Graphics Clock: " $3 $4 }'
    done
}

function display() {
    # Monitor
    which xdpyinfo > /dev/null && (
        TMP=$(xdpyinfo 2> /dev/null | grep dimensions)
        echo "Monitor:" ${TMP#  dimensions:    }
    )
    
    if [[ -n `ls -A /tmp/.X11-unix` ]]; then
        echo -ne ".X11-unix: [" && (cd /tmp/.X11-unix && for x in $(ls); do echo -ne ":${x#X} "; done; echo "]")
    else
        echo ".X11-unix: [NULL]"
    fi
    
    echo "DISPLAY: $([[ -n $DISPLAY ]] && echo $DISPLAY || echo '[NULL]')"
}

function perf() {
    echo "GPU Usage, CPU Affinity, CPU Usage"
    
    CONTINUE=1
    while [[ $CONTINUE == 1 ]]; do
        case $1 in
            "") PID="" ;;
            [0-9]*) PID=$1 ;;
            *) PID=`pidof $1` ;;
        esac
    
        GPU_USAGE=$(nvidia-smi --query --id=0 --display=UTILIZATION | grep "Gpu" | awk '{ print $3 " %" }')
        CPU_USAGE=$(cpu-usage $1)
        CPU_AFFINITY=$([[ -n $PID ]] && (taskset -pc $PID 2> /dev/null | awk '{ print $6 }')) 
        CPU_AFFINITY=$([[ -z $CPU_AFFINITY ]] && echo "N/A" || echo $CPU_AFFINITY)
        echo "$GPU_USAGE,    $CPU_AFFINITY, $CPU_USAGE"
    done
}

function info() {
    if [[ $(uname) == Darwin ]]; then
        return
    fi
    
    echo "Kernel: $(uname -r)"
    cpu && echo 
    gpu && echo 
    display && echo 
}

function nvmake() {
    MODULE=$1
    ARCH=$2
    BUILD_TYPE=$3
    NVBRANCH=sw/dev/gpu_drv/dev_a

    if [[ -z $P4ROOT ]]; then
        echo "Error: P4ROOT is not configured" > /dev/stderr
        exit 1
    fi

    if [[ -z $NVBRANCH ]]; then
        echo "Error: NVBRANCH is not configured" > /dev/stderr
        exit 1
    fi

    if [[ $(stat -c '%U' $P4ROOT/sw/misc/linux/unix-build) != root ]]; then
        UNIX_BUILD_ARGS="--unshare-namespaces"
    fi

    case $MODULE in
         dev_a) MODULE="drivers dist" ;;
        opengl) exit 1 ;; #TODO
           ppp) MODULE="post-process-packages dist" ;;
         sweep)
            pushd $P4ROOT/$NVBRANCH > /dev/null
            $P4ROOT/sw/misc/linux/unix-build $UNIX_BUILD_ARGS \
                --tools "$P4ROOT/sw/tools" \
                --devrel "$P4ROOT/sw/devrel/SDK/inc/GL" \
                nvmake sweep
            popd > /dev/null 
            return 0
        ;;
        *)
            echo "Error: NVIDIA module $MODULE is not supported" > /dev/stderr
            exit 1
        ;;
    esac

    ERROR=0
    SECONDS=0

    echo "NVMake: linux $MODULE $ARCH $BUILD_TYPE"
    mkdir -p $HOME/NVIDIA_OUT/Linux-$MODULE-$ARCH-$BUILD_TYPE
    pushd $P4ROOT/$NVBRANCH > /dev/null
    $P4ROOT/sw/misc/linux/unix-build $UNIX_BUILD_ARGS \
        --tools "$P4ROOT/sw/tools" \
        --devrel "$P4ROOT/sw/devrel/SDK/inc/GL" \
        nvmake \
        NV_COLOR_OUTPUT=1 \
        NV_COMPRESS_THREADS=16 \
        NV_FAST_PACKAGE_COMPRESSION=1 \
        NV_EXCLUDE_BUILD_MODULES="" \
        NV_KEEP_UNSTRIPPED_BINARIES=0 \
        NV_GUARDWORD=0 \
        -j16 \
        linux \
        $ARCH \
        $BUILD_TYPE \
        $MODULE \
        1> $HOME/NVIDIA_OUT/Linux-$MODULE-$ARCH-$BUILD_TYPE/nvmake.log \
        2> $HOME/NVIDIA_OUT/Linux-$MODULE-$ARCH-$BUILD_TYPE/nvmake.error && (
        echo "NVMake: $(expr $SECONDS / 60) mins"
        popd > /dev/null 
    ) || (
        grep -E -i -w "fatal|error|errors|critical|failed|: \*\*\*" $HOME/NVIDIA_OUT/Linux-$MODULE-$ARCH-$BUILD_TYPE/nvmake.error;
        popd > /dev/null 
        exit 1
    )
}

function build() {
    if [[ -z $1 ]]; then
        echo "Usage: build <dev_a|opengl|sweep|ppp> [ARCHS...] [TYPES...]" > /dev/stderr
        exit 1
    fi

    ARCHS=""
    BUILD_TYPES=""
    MODULES=""

    while [[ -n $1 ]]; do
        case $1 in
                        amd64|x86) ARCHS="$ARCHS $1" ;;
            debug|release|develop) BUILD_TYPES="$BUILD_TYPES $1" ;;
                     dev_a|opengl) MODULES="$MODULES $1" ;;
                            sweep) nvmake sweep * *; return ;;
                              ppp) nvmake ppp * *; return ;;   
            *)
                echo "Error: unknown argument $1" > /dev/stderr
                build
                exit 1
            ;;
        esac
        shift
    done

    if [[ -z $ARCHS ]]; then
        ARCHS=amd64
    fi

    if [[ -z $BUILD_TYPES ]]; then
        BUILD_TYPES=release
    fi

    for MODULE in $MODULES; do
        for ARCH in $ARCHS; do
            for BUILD_TYPE in $BUILD_TYPES; do
                nvmake "$MODULE" "$ARCH" "$BUILD_TYPE"
            done
        done
    done    
}

function install() {
    if [[ -z $1 ]]; then
        echo "Usage: install [OPTIONS]" > /dev/stderr
        echo "    e.g. install <INSTALLER_PATH>" > /dev/stderr
        echo "    e.g. install <MODULE> <ARCH> <BUILD_TYPE>" > /dev/stderr
        echo "    e.g. install <-r|--revert> <ARCH>" > /dev/stderr
        echo "    e.g. install mesa [version]" > /dev/stderr
        exit 1
    fi

    case $1 in
        opengl)
            MODULE=$1
            shift
            update-nvidia-libs $MODULE "$@"
        ;;
        -r|--revert)
            shift
            revert-nvidia-libs "$@"
        ;;
        mesa)
            exit 1 #TODO
            glxinfo | grep "OpenGL renderer"
        ;;
        mainline)
            sudo add-apt-repository ppa:cappelikan/ppa
            sudo apt update
            sudo apt install mainline
            which mainline    
        ;;
        gtlfs)
            wget https://gtlfs.nvidia.com/client/linux -O ~/gtlfs
            chmod +x ~/gtlfs
        ;;
        terminus)
            which make > /dev/null || sudo apt install -y build-essential
            wget https://sourceforge.net/projects/terminus-font/files/terminus-font-4.49/terminus-font-4.49.1.tar.gz/download -O $HOME/Downloads/terminus-font-4.49.1.tar.gz
            cd /tmp
            tar -xvf terminus-font-4.49.1.tar.gz
            cd terminus-font-4.49.1
            ./configure
            make -j8
            sudo make install fontdir
        ;;
        *)
            if [[ -f $1 || -L $1 ]]; then
                run-nvidia-installer "$1"
            else
                echo "Error: $1 doesn't exist" > /dev/stderr
                exit 1
            fi
        ;;
    esac
}

function remove() {
    if [[ -z $1 ]]; then
        echo "Usage: remove [OPTIONS]" > /dev/stderr
        echo "    e.g. remove mesa" > /dev/stderr
        exit 1
    fi

    case $1 in
        mesa)
            exit 1 #TODO
        ;;
        mainline)
            sudo add-apt-repository --remove ppa:cappelikan/ppa
            sudo apt remove mainline
        ;;
        gtlfs)
            rm -rf ~/gtlfs
        ;;
        *)
            echo "Error: can't remove $1" > /dev/stderr
            exit 1
        ;;
    esac
}

function run-nvidia-installer() {
    INSTALLER=$1
    if [[ -z $INSTALLER ]]; then
        echo "Usage: run-nvidia-installer <INSTALLER_PATH>" > /dev/stderr
        exit 1
    fi

    if [[ ! -f $INSTALLER ]]; then
        echo "Error: NVIDIA installer $INSTALLER doesn't exist" > /dev/stderr
        exit 1
    fi

    sudo chmod +x "$INSTALLER"

    who am i > /dev/null && (
        sudo systemctl isolate multi-user
        sudo "$INSTALLER" -sb
        sudo systemctl isolate graphical
    ) || (
    	echo "Error: can't run NVIDIA installer locally" > /dev/stderr
        exit 1
    )	
}

function revert-nvidia-libs() {
    if [[ -z $1 ]]; then
        echo "Usage: revert-nvidia-libs <ARCH>" > /dev/stderr
        exit 1
    fi

    ARCH=$1 && shift
    ARCHNAME=$([[ $ARCH == amd64 ]] && echo x86_64 || echo i386)
    FOLDER=/usr/lib/$ARCHNAME-linux-gnu

    for FILE in `ls $FOLDER/*.backup`; do
        sudo mv -f "$FILE" "${FILE%.*}"
        echo "Reverted: ${FILE%.*}"
    done
}

function update-nvidia-libs() {
    if [[  -z $1 || -z $2 || -z $3 ]]; then
        echo "Usage: update-nvidia-libs <MODULE> <ARCH> <BUILD_TYPE>" > /dev/stderr
        exit 1
    fi

    MODULE=$1 && shift
    ARCH=$1 && shift
    BUILD_TYPE=$1 && shift 
    FOLDER="Linux_"$ARCH"_$BUILD_TYPE"

    if [[ $(nvidia-source-version) != $(nvidia-version-installed $ARCH) ]]; then  
        echo "Error: NVIDIA modules are version locked can't overwrite *.so.$(nvidia-version-installed $ARCH) with *.so.$(nvidia-source-version)" > /dev/stderr
        exit 1
    fi

    echo "Info: update NVIDIA module [$MODULE $ARCH $BUILD_TYPE]"
    case $MODULE in
        opengl)
            FOLDER="Linux_"$ARCH"_$BUILD_TYPE"
            OUTDIR=$P4ROOT/$NVBRANCH/drivers/OpenGL/_out/$FOLDER
            BASENAMES=libnvidia-glcore.so

            for BASENAME in $BASENAMES; do
                VERSION=$(nvidia-source-version)
                ARCHNAME=$([[ $ARCH == amd64 ]] && echo x86_64 || echo i386)
                TARGETNAME=/usr/lib/$ARCHNAME-linux-gnu/$BASENAME.$VERSION

                if [[ -f $TARGETNAME || -L $TARGETNAME ]]; then
                    if [[ ! -f $TARGETNAME.backup ]]; then
                        sudo mv $TARGETNAME $TARGETNAME.backup
                    fi
                    sudo cp -f $OUTDIR/$BASENAME $TARGETNAME
                else
                    echo "Error: $TARGETNAME is missing" > /dev/stderr
                    exit 1
                fi

                echo "Updated: $TARGETNAME"
            done
        ;;
        *)
            echo "Error: NVIDIA module $MODULE is not supported" > /dev/stderr
            exit 1
        ;;
    esac 
}

function nvidia-source-version() {
    echo `grep '^#define NV_VERSION_STRING' $P4ROOT/$NVBRANCH/drivers/common/inc/nvUnixVersion.h  | awk '{print $3}' | sed 's/"//g'`
}

function nvidia-version-installed() {
    if [[ -z $1 ]]; then
        echo "Usage: nvidia-version-installed <ARCH>" > /dev/stderr
        exit 1
    fi  

    ARCH=$1
    ARCHNAME=$([[ $ARCH == amd64 ]] && echo x86_64 || echo i386)
    SOFILE=$(ls /usr/lib/$ARCHNAME-linux-gnu/libnvidia-glcore.so* | head -n 1)
    POS=$([[ $ARCH == amd64 ]] && echo 46 || echo 44)
    LEN=$(( ${#SOFILE} - POS ))
    VERSION=${SOFILE:$POS:$LEN}

    if [[ -f /usr/lib/$ARCHNAME-linux-gnu/libnvidia-glvkspirv.so.$VERSION ]]; then
        echo $VERSION
    else
        echo "Error: can't parse NVIDIA version installed" > /dev/stderr
        exit 1
    fi
}

function install-dvs-driver() {
    TYPE=Release
    BRANCH=""
    CL=""   

    while [[ -n $1 ]]; do
        case $1 in
              debug)  TYPE=Debug  ;;
            develop)  TYPE=Develop  ;;
              dev_a)  shift; BRANCH=dev_a; CL=$1 ;;
             public)  shift; BRANCH=public; CL=$1 ;;
            *)
                echo "Error: unknown argument $1" > /dev/stderr
                exit 1
            ;;
        esac
        shift
    done

    case $BRANCH in
        dev_a)
            SUFFIX=$([[ $TYPE == Debug ]] && echo -internal || echo "") 
            URL="http://linuxqa.nvidia.com/dvsbuilds/gpu_drv_dev_a_${TYPE}_Linux_AMD64_unix-build_Test_Driver/SW_$CL.0_gpu_drv_dev_a_${TYPE}_Linux_AMD64_unix-build_Test_Driver.tgz/NVIDIA-Linux-x86_64-DVS${SUFFIX}.run"
            OUT=$HOME/Downloads/NVIDIA-dev_a-$TYPE-CL$CL.run

        ;;
        public)
            PATCH=$([[ $ID == Develop ]] && echo /develop || echo "")
            URL="http://linuxqa/builds/release/display/x86_64${PATCH}/$CL/NVIDIA-Linux-x86_64-$CL.run"
            OUT=$HOME/Downloads/NVIDIA-Public-$TYPE-$CL.run
        ;;
    esac

    echo "Downloading: $OUT"   

    if [[ -f $OUT ]]; then
        echo "Reuse cache: $OUT"
        chmod 777 $OUT
    else
        TMPFILE=/tmp/$(basename $OUT)
        wget $URL -O $TMPFILE && (
            mv -f $TMPFILE $OUT
            chmod 777 $OUT
        ) || (
            echo "Error: can't download $URL" > /dev/stderr
            exit 1
        )
    fi

    if [[ -f $OUT ]]; then
        read -p "Do you want to install now? (Y/n) " RSVP
        case $RSVP in
            ""|y|Y|1)
                echo "Installing $OUT"
                install "$OUT"
            ;;
        esac
    fi
}

function drivers() {
    if [[ -z $1 ]]; then
        echo "Usage: drivers [debug] [develop] [BRANCH CL] [public RELEASE_ID]" > /dev/stderr
        echo "    e.g. drivers dev_a CL" > /dev/stderr
        echo "    e.g. drivers dev_a CL debug" > /dev/stderr
        echo "    e.g. drivers public RELEASE_ID" > /dev/stderr
        echo "    e.g. drivers public RELEASE_ID develop" > /dev/stderr
        exit 1
    fi

    IS_PUBLIC=0
    for VAR in $@; do
        case $VAR in
            public) IS_PUBLIC=1 ;;
        esac
    done

    if [[ ! -f /mnt/linuxqa/nvt.sh || $IS_PUBLIC != 1 ]]; then
        install-dvs-driver "$@"
    else
        /mnt/linuxqa/nvt.sh drivers "$@"
    fi
}

function flamegraph() {    
    which perf || (
        echo "Error: can't find perf in PATH" > /dev/stderr
        exit 1
    )

    NAME=Perf-NoName
    SVG_FILE=$HOME/zhujie-$NAME.svg
    PERF_DATA=$HOME/zhujie-$NAME.data
    PERF_RECORD_SYSTEM_WIDE=1
    PERF_RECORD_PID=" -a "
    PERF_RECORD_SECONDS=10
    PERF_RECORD_ARGS=" -F 100 -g --call-graph dwarf "

    while [[ -n $1 ]]; do
        case $1 in
            -n|--name)
                shift
                NAME=$1
                SVG_FILE=$HOME/zhujie-$NAME.svg
                PERF_DATA=$HOME/zhujie-$NAME.data
            ;;
            -p|--pid)
                shift
                PERF_RECORD_SYSTEM_WIDE=0
                PERF_RECORD_PID=" --pid=$1 "
            ;;
            -s|--sleep)
                shift
                PERF_RECORD_SECONDS=$1
            ;;
            *)
	            if [[ -n $(pidof $1) ]]; then
	                NAME=$([[ $NAME == Perf-NoName ]] && echo $1 || echo $NAME)
	                SVG_FILE=$HOME/zhujie-$NAME.svg
                    PERF_DATA=$HOME/zhujie-$NAME.data
                    PERF_RECORD_SYSTEM_WIDE=0
                    PERF_RECORD_PID=" --pid=$(pidof $NAME) "
	            else
	                echo "Error: process $1 doesn't exist" > /dev/stderr
	                exit 1
	            fi
            ;;
        esac
        shift
    done

    perf --help 1> /dev/null 2> /dev/null || (
        sudo apt install -y linux-tools-`uname -r`
        sudo apt install -y linux-cloud-tools-`uname -r`
        sudo apt install -y linux-tools-generic
        sudo apt install -y linux-cloud-tools-generic
    )

    if [[ -f $PERF_DATA ]]; then
        rm -rf "$PERF_DATA"
    fi

    echo -ne "Info: perf record for $PERF_RECORD_SECONDS seconds\t"
    sudo perf record $PERF_RECORD_PID $PERF_RECORD_ARGS \
        --output="$PERF_DATA" \
        --sleep $PERF_RECORD_SECONDS \
        2> /tmp/zhujie-$(basename $PERF_DATA).error \
        && echo "[OK]" || (
            echo "[FAILED]"
            cat /tmp/zhujie-$(basename $PERF_DATA).error
            exit 1
        )
    sudo chmod 777 "$PERF_DATA"

    if [[ ! -f $PERF_DATA ]]; then
        echo "Error: $PERF_DATA is missing" > /dev/stderr
        exit 1
    fi
    
    BASENAME=$(basename "$PERF_DATA")
    
    echo -ne "Info: perf script\t"
    sudo perf script --input="$PERF_DATA" \
        1> "/tmp/zhujie-$BASENAME.perf" \
        2> "/tmp/zhujie-$BASENAME.perf.error" \
        && echo "[OK]" || (
            echo "[FAILED]"
            cat "/tmp/zhujie-$BASENAME.perf.error"
            exit 1
        ) 
    
    echo -ne "Info: stackcollapse-perf.pl\t"
    sudo stackcollapse-perf.pl "/tmp/zhujie-$BASENAME.perf" \
        1> "/tmp/zhujie-$BASENAME.perf.folded" \
        2> "/tmp/zhujie-$BASENAME.perf.folded.error" \
        && echo "[OK]" || (\
            echo "[FAILED]"
            cat "/tmp/zhujie-$BASENAME.perf.folded.error"
            exit 1
        )
    
    echo -ne "Info: stackcollapse-recursive.pl\t"
    sudo stackcollapse-recursive.pl "/tmp/zhujie-$BASENAME.perf.folded" \
        1> "/tmp/zhujie-$BASENAME.perf.folded.recursive" \
        2> "/tmp/zhujie-$BASENAME.perf.folded.recursive.error" \
        && echo "[OK]" || (\
            echo "[FAILED]"
            cat "/tmp/zhujie-$BASENAME.perf.folded.recursive.error"
            exit 1
        )
    
    echo -ne "Info: flamegraph.pl\t"
    sudo flamegraph.pl "/tmp/zhujie-$BASENAME.perf.folded.recursive" \
        1> "$SVG_FILE" \
        2> "/tmp/zhujie-$BASENAME.perf.folded.recursive.error" \
        && echo "[OK]" || (\
            echo "[FAILED]"
            cat "/tmp/zhujie-$BASENAME.perf.folded.recursive.error"
            exit 1
        )
}
    
function p4bisect() {
    which p4 || (
        echo "Error: can't find p4 in PATH" > /dev/stderr
        exit 1
    )
    
    if [[ -z $1 || -z $2 || -z $3 ]]; then
        echo "Usage: p4bisect <dev_a|opengl> <DATE_OLD> <DATE_NEW>" > /dev/stderr
        exit 1
    fi
    
    MODULE=$1
    DATE_OLD=$2
    DATE_NEW=$3
    CHANGES="$HOME/zhujie-p4-changes-on-$MODULE"
    
    case $MODULE in
         dev_a) FOLDER="$P4ROOT/sw/dev/gpu_drv/dev_a" ;;
        opengl) FOLDER="$P4ROOT/sw/dev/gpu_drv/dev_a/drivers/OpenGL" ;;
        *)
            echo "Error: NVIDIA module $1 is not supported" > /dev/stderr
            exit 1
        ;;
    esac 
    
    p4 changes -s submitted $FOLDER/...@$DATE_OLD,@$DATE_NEW > $CHANGES
    LINE_COUNT=$(wc -l < $CHANGES)
        
    while [[ $LINE_COUNT > 2 ]]; do
        LINE_NO=$(( $LINE_COUNT/2 ))
        LINE=$(sed -n "${LINE_NO}p" $CHANGES)
    
        IFS=" " read -ra SEGMENTS <<< "$LINE"
        CL="${SEGMENTS[1]}"
        DESC=$(p4 describe -s $CL | head -n 1)
    
        IFS=" " read -ra SEGMENTS <<< "$DESC"
        DATE="${SEGMENTS[5]}:${SEGMENTS[6]}"
        ANSWERED=0
    
        echo "Testing change $CL @$DATE (out of $LINE_COUNT changes):"
    
        read -p "Download from DVS build? (Y/n): " RSVP
        case $RSVP in
            y|Y|1) drivers dev_a $CL ;;
        esac
    
        read -p "Is this change new? (y/n): " RSVP 
        case $RSVP in
            y|Y|1) DATE_NEW="$DATE" ;;
            n|N|0) DATE_OLD="$DATE" ;;
        esac
    
        p4 changes -s submitted $FOLDER/...@$DATE_OLD,@$DATE_NEW > $CHANGES
        LINE_COUNT=$(wc -l < $CHANGES)
        
        echo ""
    done
}
    
function pic-v() {
    which pic-v || (
        echo "Error: can't find pic-v in PATH" > /dev/stderr
        exit 1
    )
    
    if [[ -z $1 ]]; then
        echo "Usage: pic-v [APP]" > /dev/stderr
        exit 1
    fi
    
    # Launch pic-v if it's not running
    pgrep -x pic-v >/dev/null || (
        bash -c "cd $PIC_V && ./pic-v" &
        sleep 3
    )
    
    # Launch game in current terminal 
    PIC_V_DIR=$(dirname `while pic-v | head -n 1`)
    if [[ ! -f $PIC_V_DIR ]]; then
        echo "Error: can't find pic-v's parent directory" > /dev/stderr
        exit 1
    fi
    
    cd $PIC_V_DIR
    source setup-env.sh
    
    "$@" && (
        # Launch http server if it's not running
        ps aux | grep "[p]ython3 -m http.server" || (
            bash -c "cd $PIC_V/PerfInspector/output && ./launch-py3-server.sh" &
            sleep 1
        )
    
        URL="http://localhost:8000/"
        which firefox && firefox $URL || ( 
            which chromium && chromium $URL || 
                echo "Open http://localhost:8000/ in your browser" 
        )
    )
}
    
function choose-kernel() {
    echo "Found installed kernel:"
    
    INDEX=-1
    for K in $(find /boot -name vmlinuz-* 2> /dev/null); do
        THISNAME=${K:14:$[${#K}-14]}
        MARK=$([[ $THISNAME == $(uname -r) ]] && echo "*" || echo " ")
        INDEX=$((INDEX+1))
        echo "$MARK [$INDEX]" $THISNAME
    done
    
    read -p "Choose a kernel to be default: " KNAME
    if [[ $KNAME =~ ^[0-9]+$ ]]; then
        INDEX=0
        for K in $(find /boot -name vmlinuz-* 2> /dev/null); do
            if [[ $INDEX == $KNAME ]]; then
                KNAME=${K:14:$[${#K}-14]}
                break
            else
                INDEX=$((INDEX+1))
            fi
        done
    fi
    
    INVALID=1
    for K in $(find /boot -name vmlinuz-* 2> /dev/null); do
        if [[ ${K:14:$[${#K}-14]} == $KNAME ]]; then
            INVALID=0
            break
        fi
    done
    
    if [[ $INVALID == 1 ]]; then
        echo "Error: kernel $KNAME is invalid" > /dev/stderr
        exit 1
    fi
    
    rm -rf /tmp/zhujie-grub.tmp
    while read -r LINE; do
        if [[ $LINE == *"GRUB_DEFAULT"* ]]; then
            echo "GRUB_DEFAULT=\"Advanced options for Ubuntu>Ubuntu, with Linux $KNAME\"" >> "/tmp/zhujie-grub.tmp"
        else
            echo "$LINE" >> /tmp/zhujie-grub.tmp
        fi
    done < /etc/default/grub
    
    sudo cp /tmp/zhujie-grub.tmp /etc/default/grub
    sudo update-grub
}
    
function fake-display() {
    if [[ $EUID != 0 ]]; then
        echo "Error: please run as root" > /dev/stderr
        exit 1
    fi
    
    RESOLUTION=$1
    if [[ $(has-nvidia-gpu) == 1 ]]; then
        if [[ -z $RESOLUTION ]]; then
            echo "Usage: fake-display [RESOLUTION]" > /dev/stderr
            RESOLUTION=$(active-resolution --default $_4K)
        fi
    else
        RESOLUTION=""
        unset NVTEST_DRIVER_DIR
    fi
    
    if [[ $(has-nvidia-gpu) == 1 ]]; then
        /mnt/linuxqa/nvt.sh ${RESOLUTION}__runcmd --cmd 'sleep 100000000'
    else
        /mnt/linuxqa/nvt.sh runcmd --cmd 'sleep 100000000'
    fi
}

# Share a running display 
function x0vnc() {
    which x0vncserver > /dev/null || sudo apt install -y tigervnc-scraping-server 

    if [[ -z $VNCPORT ]]; then
        VNCPORT=5900
    fi
    
    while [[ -n $1 ]]; do
        case $1 in
            status)
                shift
                x0vncserver -list "$@"
            ;;
            stop)
                shift
                x0vncserver -kill "$@"
            ;;
            *) 
                SHARED_DISPLAY=$1
                x0vncserver -localhost no -PasswordFile $HOME/.vnc/passwd -rfbport $VNCPORT $SHARED_DISPLAY
            ;;
        esac
    done
}
    
# Create a virtual display
function vnc() {
    which vncserver > /dev/null || sudo apt install -y tigervnc-standalone-server 
    
    if [[ -z $VNCPORT ]]; then
        VNCPORT=5900
    fi

    while [[ -n $1 ]]; do
        case $1 in
            status) 
                shift
                vncserver -list "$@"
            ;;
            stop) 
                shift
                vncserver -kill "$@"
            ;;
            *)
                GEOMETRY=$(active-resolution --default $_4K)
                vncserver -localhost no -PasswordFile $HOME/.vnc/passwd -rfbport $VNCPORT -geometry $GEOMETRY
            ;;
        esac
    done
}
    
function ddnet() {
    # 2560x1440
    # Fullscreen
    # Vulkan
    # Default
    # RaiNyMore2 -- GPU-intensive 

    check-display

    (echo 7; echo 2; echo 1; echo 1; echo 2; echo n) | phoronix-test-suite benchmark pts/ddnet
}

function click-talos-message-window() {
    which xdotool > /dev/null || sudo apt install -y xdotool
    sleep 3
    
    VALID=1
    while [[ $VALID == 1 ]]; do
        WINDOW_ID=$(xdotool getactivewindow)
        WINDOW_NAME=$(xdotool getwindowname $WINDOW_ID)
        if [[ $WINDOW_NAME == Message ]]; then
            POSITION=$(xdotool getwindowgeometry $WINDOW_ID | grep Position: | awk '{print $2}')
            EXTENT=$(xdotool getwindowgeometry $WINDOW_ID | grep Geometry: | awk '{print $2}')
            X=${POSITION%,*}; Y=${POSITION#*,}
            W=${EXTENT%x*};   H=${EXTENT#*x}
            xdotool mousemove $((X+W-50)) $((Y+H-70))
            xdotool click 1
        else #elif [[ $WINDOW_NAME == "Talos - Linux - 64bit" ]]; then
            sleep 10
        fi
        
        if [[ -z $(pidof Talos) ]]; then
            VALID=0
        fi
    done
}

function kill-talos-later() {
    sleep 30

    STOP=0
    SECONDS=0
    while [[ $STOP == 0 ]]; do
        if [[ ! -f $HOME/zhujie-talos.log ]]; then
            STOP=1
            continue
        fi

        LINE=$(cat $HOME/zhujie-talos.error | grep "corrupted size vs. prev_size")
        if [[ -n $LINE ]]; then
            pkill -9 Talos 
            STOP=1
            sleep 2
        else
            if [[ -z $(pidof Talos) ]]; then
                STOP=1
            fi
            sleep 2
        fi
    done
}

function talos() {
    check-display
    
    DIRECT_CALL=0
    while [[ -n $1 ]]; do
        case $1 in
            -d|--direct) shift; DIRECT_CALL=1 ;;
        esac
        shift
    done

    # Launch steam if it's not currently running
    pgrep -x steam >/dev/null || (
        steam &
        sleep 20
    )

    if [[ ! -f "$HOME/.steam/steam/steamapps/common/The Talos Principle/Bin/x64/Talos" ]]; then
        echo "Error: install 'Talos Principle' in steam's window and try again" > /dev/stderr
        exit 1
    fi

    click-talos-message-window &
    kill-talos-later &

    if [[ $ROUNDS > 1  && -f /tmp/zhujie-talos-$ROUNDS-rounds.fps ]]; then
        rm -rf /tmp/zhujie-talos-$ROUNDS-rounds.fps
    fi
    
    TASKSET="taskset"
    TASKSET_OPTIONS="--cpu-list"
    if [[ -n $CPU_LIST ]]; then
        read -p "Run with CPU affinity $CPU_LIST? (Y/n): " RSVP
        case $RSVP in
            ""|y|Y|1) ;;
            *) 
                TASKSET=""
                TASKSET_OPTIONS=""
                CPU_LIST=""
                echo "CPU affinity is ignored"
            ;;
        esac 
    else
        TASKSET=""
        TASKSET_OPTIONS=""
    fi
    RESOLUTION=$(active-resolution --default $_2K)
    WIDTH=$(echo $RESOLUTION | awk -F 'x' '{ print $1 }')
    HEIGHT=$(echo $RESOLUTION | awk -F 'x' '{ print $2 }')
    
    pushd "$HOME/.steam/steam/steamapps/common/The Talos Principle/Bin/x64" > /dev/null
    $TASKSET $TASKSET_OPTIONS $CPU_LIST ./Talos +gfx_strAPI VLK +gfx_pixResWidth $WIDTH +gfx_pixResHeight $HEIGHT +exec $HOME/.phoronix-test-suite/installed-tests/pts/talos-principle-1.2.1/talos-run-test.lua 1> $HOME/zhujie-talos.log 2> $HOME/zhujie-talos.error && (   
        cat "$HOME/zhujie-talos.log" | grep "Average:" | tail -n1 | awk '{print $3}' | tee -a /tmp/zhujie-talos-$ROUNDS-rounds.fps
    ) || (
        cat $HOME/zhujie-talos.log
        cat $HOME/zhujie-talos.error
        exit 1
    )
    popd > /dev/null
}

function apex() {
    if [[ $EUID != 0 ]]; then
        echo "Error: please run as root" > /dev/stderr
        exit 1
    fi
    
    DIRECT_CALL=0
    while [[ -n $1 ]]; do
        case $1 in
            -d|--direct) DIRECT_CALL=1 ;;
        esac
        shift
    done
    
    if [[ $(has-nvidia-gpu) == 0 ]]; then
        echo "Info: unset NVTEST_DRIVER_DIR for mesa driver"
        unset NVTEST_DRIVER_DIR
    fi
    
    RESOLUTION=$(active-resolution --default $_4K)
    
    if [[ $DIRECT_CALL == 0 ]]; then
        FPS_FILE=$HOME/zhujie-Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF.${ROUNDS}-rounds.fps
    else
        check-display
        FPS_FILE=$HOME/zhujie-Apex_Legends.${ROUNDS}-rounds.fps
    fi
    
    if [[ $DIRECT_CALL == 0 ]]; then
        /mnt/linuxqa/nvt.sh DxvkApexLegends --traces Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF \
        1> $HOME/zhujie-Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF.log \
        2> $HOME/zhujie-Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF.error && (
            cat $HOME/zhujie-Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF.log | grep -o 'dxvk-v[0-9.]*-fps[[:blank:]]\+[0-9.]*' | awk '{print $2}' | tee -a $FPS_FILE
        ) || (
            cat $HOME/zhujie-Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF.log
            cat $HOME/zhujie-Apex_Legends_Ultra_${RESOLUTION}_1xAA_16xAF.error
            exit 1
        )
    else
        TASKSET="taskset"
        TASKSET_OPTIONS="--cpu-list"
        if [[ -n $CPU_LIST ]]; then
            read -p "Run with CPU affinity $CPU_LIST? (Y/n): " RSVP
            case $RSVP in
                ""|y|Y|1) ;;
                *) 
                    TASKSET=""
                    TASKSET_OPTIONS=""
                    CPU_LIST=""
                    echo "CPU affinity is ignored"
                ;;
            esac 
        else
            TASKSET=""
            TASKSET_OPTIONS=""
        fi
        
        cd /root/nvt/tests/dxvk/run_dir; DISPLAY=:0.0 DXVK_HUD=full DXVK_LOG_LEVEL=none DXVK_STATE_CACHE=0 LD_LIBRARY_PATH=/root/nvt/tests/dxvk/experimental-7.0-20230201/files/lib64:/root/nvt/tests/dxvk/experimental-7.0-20230201/files/lib:/mnt/linuxqa/nvtest/pynv_files/vulkan_loader/sdk-1.1.114/Linux_amd64:/mnt/linuxqa/nvtest/pynv_files/vkdevicechooser/Linux_amd64 LIBC_FATAL_STDERR_=1 NODEVICE_SELECT=1 PATH=/root/nvt/tests/dxvk/experimental-7.0-20230201/files/bin:/root/NVIDIA_TOOLS:/root:/root/bin:/root/.local/bin:/root/NVIDIA_TOOLS:/root:/root/bin:/root/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin PROTON_VR_RUNTIME=1 STEAM_COMPAT_DATA_PATH=/root/nvt/tests/dxvk/experimental-7.0-20230201/prefix VK_ICD_FILENAMES=/etc/vulkan/icd.d/nvidia_icd.json VK_INSTANCE_LAYERS=VK_LAYER_AEJS_DeviceChooserLayer VK_LAYER_PATH=/mnt/linuxqa/nvtest/pynv_files/vulkan_loader/sdk-1.1.114/Linux_amd64/explicit_layer.d:/mnt/linuxqa/nvtest/pynv_files/vkdevicechooser VR_OVERRIDE=1 VULKAN_DEVICE_INDEX=0 WINEDEBUG=-all WINEDLLOVERRIDES='steam.exe=b;d3d11=n;d3d10core=n;dxgi=n;d3d11x_42=n;d3d11x_43=n;d3d9=n;nvcuda=b;' WINEDLLPATH=/root/nvt/tests/dxvk/experimental-7.0-20230201/files/lib64/wine:/root/nvt/tests/dxvk/experimental-7.0-20230201/files/lib/wine WINEESYNC=1 WINEPREFIX=/root/nvt/tests/dxvk/experimental-7.0-20230201/prefix/pfx WINE_MONO_OVERRIDES='Microsoft.Xna.Framework.*,Gac=n' __GL_4718b=0x00000008 __GL_61807119=/root/nvt/log/loadmonitor/00057_run-in-soldier __GL_SHADER_DISK_CACHE=0 __GL_SYNC_TO_VBLANK=0  $TASKSET $TASKSET_OPTIONS $CPU_LIST /root/nvt/tests/dxvk/experimental-7.0-20230201/files/bin/wine /root/nvt/tests/dxvk/run_dir/r5apex.exe 1000 0 fps_log 1> $HOME/zhujie-Apex_Legends.log 2> $HOME/zhujie-Apex_Legends.error && (
            cat $HOME/zhujie-Apex_Legends.log | grep -o 'average FPS: [0-9.]*' | awk '{print $3}' | tee -a $FPS_FILE
        ) || (
            cat $HOME/zhujie-Apex_Legends.log
            cat $HOME/zhujie-Apex_Legends.error
            exit 1
        )
    fi
}

function viewperf-home() {
    if [[ -d /root/nvt/tests/viewperf2020v3/viewperf2020 ]]; then
        echo /root/nvt/tests/viewperf2020v3/viewperf2020
    elif [[ -d /home/nvidia/nvt/tests/viewperf2020v3/viewperf2020 ]]; then
        echo /home/nvidia/nvt/tests/viewperf2020v3/viewperf2020
    elif [[ -d /home/zhujie/nvt/tests/viewperf2020v3/viewperf2020 ]]; then
        echo /home/zhujie/nvt/tests/viewperf2020v3/viewperf2020
    elif [[ -d /home/zhujie/viewperf2020v3/viewperf2020 ]]; then
        echo /home/zhujie/viewperf2020v3/viewperf2020
    else
        echo "Error: can't find viewperf2020v3 folder" > /dev/stderr
        exit 1
    fi
}

function list-viewperf-resolutions() {
    pushd $(viewperf-home) > /dev/null
    
    if [[ -z $1 ]]; then
        echo "Error: $(pwd)/viewsets/$TEST_NAME/config.xml doesn't exist" > /dev/stderr
        exit 1
    else
        RESOLUTIONS=$(cat viewsets/$1/config/$1.xml | grep '<Window Resolution=' | awk '{ print $2 }' | awk -F '=' '{ print $2}')
    fi
    
    popd > /dev/null
}
    
function catia() {
    if [[ $EUID != 0 ]]; then
        echo "Error: please run as root" > /dev/stderr
        exit 1
    fi
    
    check-display
    
    if [[ $(has-nvidia-gpu) == 0 ]]; then
        echo "Info: unset NVTEST_DRIVER_DIR for mesa driver"
        unset NVTEST_DRIVER_DIR
    fi
    
    RESOLUTION=$(active-resolution --default $_4K)
    TASKSET="taskset"
    TASKSET_OPTIONS="--cpu-list"
    if [[ -n $CPU_LIST ]]; then
        read -p "Run with CPU affinity $CPU_LIST? (Y/n): " RSVP
        case $RSVP in
            ""|y|Y|1) ;;
            *) 
                TASKSET=""
                TASKSET_OPTIONS=""
                CPU_LIST=""
                echo "CPU affinity is ignored"
            ;;
        esac 
    else
        TASKSET=""
        TASKSET_OPTIONS=""
    fi
        
    pushd $(viewperf-home) > /dev/null
    $TASKSET $TASKSET_OPTIONS $CPU_LIST ./viewperf/bin/viewperf viewsets/catia/config/catia.xml -resolution $RESOLUTION \
    1> $HOME/zhujie-catia_${RESOLUTION}.log \
    2> $HOME/zhujie-catia_${RESOLUTION}.error && (
        cat $HOME/zhujie-catia_${RESOLUTION}.log | grep "<Composite Score=" | grep -o '".*"' | awk '{print substr($0, 2, length($0) - 2)}' | tee -a $HOME/zhujie-catia_${RESOLUTION}.fps
    ) || (
        cat $HOME/zhujie-catia_${RESOLUTION}.log
        cat $HOME/zhujie-catia_${RESOLUTION}.error
        echo ""
        echo "Available resolutions: "
        list-viewperf-resolutions catia
    )
    popd > /dev/null
}

function creo() {
    if [[ $EUID != 0 ]]; then
        echo "Error: please run as root" > /dev/stderr
        # exit 1
    fi
    
    check-display
    
    if [[ $(has-nvidia-gpu) == 0 ]]; then
        echo "Info: unset NVTEST_DRIVER_DIR for mesa driver"
        unset NVTEST_DRIVER_DIR
    fi
    
    RESOLUTION=$(active-resolution --default $_4K)
    TASKSET="taskset"
    TASKSET_OPTIONS="--cpu-list"
    if [[ -n $CPU_LIST ]]; then
        read -p "Run with CPU affinity $CPU_LIST? (Y/n): " RSVP
        case $RSVP in
            ""|y|Y|1) ;;
            *) 
                TASKSET=""
                TASKSET_OPTIONS=""
                CPU_LIST=""
                echo "CPU affinity is ignored"
            ;;
        esac 
    else
        TASKSET=""
        TASKSET_OPTIONS=""
    fi
        
    pushd $(viewperf-home) > /dev/null
    $TASKSET $TASKSET_OPTIONS $CPU_LIST ./viewperf/bin/viewperf viewsets/creo/config/creo.xml -resolution $RESOLUTION \
    1> $HOME/zhujie-creo_${RESOLUTION}.log \
    2> $HOME/zhujie-creo_${RESOLUTION}.error && (
        cat $HOME/zhujie-creo_${RESOLUTION}.log | grep "<Composite Score=" | grep -o '".*"' | awk '{print substr($0, 2, length($0) - 2)}' | tee -a $HOME/zhujie-creo_${RESOLUTION}.fps
    ) || (
        cat $HOME/zhujie-creo_${RESOLUTION}.log
        cat $HOME/zhujie-creo_${RESOLUTION}.error
        echo ""
        echo "Available resolutions: "
        list-viewperf-resolutions creo
    )
    popd > /dev/null
}

function prime-run() {
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __VK_LAYER_NV_optimus=NVIDIA_only
    export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
    if [[ ! -f $VK_ICD_FILENAMES ]]; then 
        export VK_ICD_FILENAMES=/etc/vulkan/icd.d/nvidia_icd.json
    fi
    exec "$@"
}

function cpu-count() {
    lscpu | grep "^CPU(s):" | awk '{print $2}'
}

function cpu-offline() {
    if [[ -z $1 ]]; then
        echo "Error: No CPU to put offline" > /dev/stderr
        exit 1
    fi
    
    for RANGE in $@; do
        for i in `seq $(parse-range $RANGE)`; do
            echo 0 | sudo tee /sys/devices/system/cpu/cpu$i/online > /dev/null
        done
    done
}

function cpu-online() {
    for i in `seq 1 $(($(cpu-count) - 1))`; do
        echo 1 | sudo tee /sys/devices/system/cpu/cpu$i/online > /dev/null
    done
}

function cpu-usage() {
    case $1 in
        "") PID="" ;;
        [0-9]*) PID=$1 ;;
        *) PID=$(pidof $1) ;;
    esac
    
    if [[ -n $PID ]]; then
        RANGE=$(parse-range $(taskset -pc $PID | awk '{ print $6 }'))
        for i in `seq $RANGE`; do 
            echo $i > /dev/null
        done
        ps up $PID | awk 'NR==2{ print $3 " %" }' 
    else
        top -bn2 | grep '%Cpu' | tail -1 | grep -P '(....|...) id,'|awk '{print 100-$8 " %"}'
    fi
}

function sync() {
    USE_TMP_GIT=0
    BASEDIR=$(dirname $0)
    if [[ ! -d $BASEDIR/.git ]]; then
        read -p "Force update/overwrite $0? (Y/n): " RSVP
        case $RSVP in
            ""|y|Y|1) USE_TMP_GIT=1 ;;
            *) echo "Nothing updated"; exit 1 ;;
        esac
    fi
    
    if [[ $USE_TMP_GIT == 1 ]]; then
        if [[ ! -d /tmp/zhujie ]]; then 
            git clone https://github.com/wanlizhu/zhujie /tmp/zhujie
        fi 
        
        pushd /tmp/zhujie > /dev/null
        cp -f $0 /tmp/zhujie/zhujie
        git add .
        git commit -m "$(date)"
        git pull
        git push --set-upstream https://github.com/wanlizhu/zhujie master
        cp -f /tmp/zhujie/zhujie $0
        popd > /dev/null
    else
        pushd "$BASEDIR" > /dev/null
        git add .
        git commit -m "$(date)"
        git pull
        git push --set-upstream https://github.com/wanlizhu/zhujie master
        popd > /dev/null
    fi
}

function vpn() {
    which openconnect > /dev/null || sudo apt install -y openconnect
    
    if [[ $1 == off ]]; then
        sudo pkill -9 `pidof openconnect` 
        return
    fi
    
    if [[ -z $1 ]]; then
        read -p "DUO pass code: " CODE
    else
        CODE=$1
    fi
    
    which openconnect || (
        echo "Error: can't find openconnect in PATH" > /dev/stderr
        exit 1
    )
    
    echo "Xavier#35224047,$CODE" | sudo openconnect --authgroup Employee -u wanliz https://ngvpn32.vpn.nvidia.com:8443
}

function mean() {
    INLINE=False
    FILE=""
    
    while [[ -n $1 ]]; do
        case $1 in
            --inline) INLINE=True ;;
            *) FILE=$1 ;;
        esac
        shift
    done
    
    if [[ ! -f $FILE ]]; then
        echo "Error: $FILE doesn't exist" > /dev/stderr
        exit 1
    fi
    
    python3 -c "
import statistics as stat
columns = []
labels = []
lines_count = 0
with open(\"$FILE\", \"r\") as file:
    for line in [ line.strip() for line in file.readlines() ]:
        lines_count += 1
        NW = -1
        for word in [ word.strip() for word in line.split(',') ]:
            NW += 1
            if len(columns) == 0:
                columns = [ [] for x in line.split(',') ]
                labels = [ 'FPS' for x in columns ]
            if word.replace('.', '0').replace('-', '0').isdigit():
                columns[NW].append(float(word))
            else:
                labels[NW] = word
if lines_count >= 2:
    for i in range(0, len(columns)):
        if $INLINE:
            print('{:.4f}'.format(stat.mean(columns[i])))
        else:
            print('{}: {:.4f}'.format(labels[i], stat.mean(columns[i])))
"
}

function mean2() {
    INLINE=False
    FILE=""
    
    while [[ -n $1 ]]; do
        case $1 in
            --inline) INLINE=True ;;
            *) FILE=$1 ;;
        esac
        shift
    done
    
    if [[ ! -f $FILE ]]; then
        echo "Error: $FILE doesn't exist" > /dev/stderr
        exit 1
    fi
    
    python3 -c "
import statistics as stat
columns = []
labels = []
lines_count = 0
has_label_line = False
with open(\"$FILE\", \"r\") as file:
    for line in [ line.strip() for line in file.readlines() ]:
        lines_count += 1
        NW = -1
        for word in [ word.strip() for word in line.split(',') ]:
            NW += 1
            if len(columns) == 0:
                columns = [ [] for x in line.split(',') ]
                labels = [ 'FPS' for x in columns ]
            if word.replace('.', '0').replace('-', '0').isdigit():
                columns[NW].append(float(word))
            else:
                labels[NW] = word
                has_label_line = True
if lines_count >= 2 + (1 if has_label_line else 0):
    if $INLINE:
        numbers = [ '{:.4f}'.format(stat.mean(column)) for column in columns ]
        print(','.join(numbers))
    else:
        for i in range(0, len(columns)):
            print('{}: {:.4f} (StdDev: {:.4f})'.format(labels[i], stat.mean(columns[i]), stat.stdev(columns[i])))
"
}

function average() {
    mean2 "$@"
}

function loop() {
    if [[ -z $1 ]]; then
        echo "Usage: loop <TIMES> <CMD>" > /dev/stderr
        exit 1
    fi
        
    rm -rf $HOME/zhujie-loop.records
    for i in `seq 1 $1`; do
        $2 | tee -a $HOME/zhujie-loop.records
    done
        
    if [[ -f "$HOME/zhujie-loop.records" ]]; then
        echo ""
        average $HOME/zhujie-loop.records
    fi
}

function loop-v() {
    if [[ -z $1 ]]; then
        echo "Usage: loop <TIMES> <CMD>" > /dev/stderr
        exit 1
    fi
        
    rm -rf $HOME/zhujie-loop.records
    for i in `seq 1 $1`; do
        $2 | tee -a $HOME/zhujie-loop.records
    done
        
    if [[ -f "$HOME/zhujie-loop.records" ]]; then
        echo ""
        average $HOME/zhujie-loop.records
        visualize $HOME/zhujie-loop.records
    fi
}

function parse-range() {
    if [[ $1 == *"-"* ]]; then
        echo "${1/-/ }"
    else
        echo "$1 $1"
    fi
}

function visualize() {
    INFILE=""
    TITLE=""
    XLABEL=""
    YLABEL=""
    
    while [[ -n $1 ]]; do
        case $1 in
             -i|--input) shift; INFILE=$1 ;;
             -t|--title) shift; TITLE=$1 ;;
            -x|--xlabel) shift; XLABEL=$1 ;;
            -y|--ylabel) shift; YLABEL=$1 ;;
            *)
                if [[ -f $1 ]]; then
                    INFILE=$1
                fi
            ;;
        esac
        shift
    done
    
    if [[ ! -f $INFILE ]]; then
        echo "Usage: visualize -i <INFILE> -t <TITLE> -x <XLABEL> -y <YLABEL>" > /dev/stderr
        exit 1
    fi
    
    if [[ -z $TITLE ]]; then
        TITLE=$(basename $INFILE)
    fi
    
    if [[ -z $XLABEL ]]; then
        XLABEL="Test Index"
    fi
    
    if [[ -z $YLABEL ]]; then
        YLABEL="Average FPS"
    fi
    
    python3 -c "
from signal import signal, SIGINT
from sys import exit
import subprocess as subproc
try:
    import matplotlib
    import numpy
except ImportError:
    subproc.run('python3 -m pip install matplotlib', shell=True, check=True)
    subproc.run('python3 -m pip install numpy', shell=True, check=True)
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import statistics as stat

def sigint_proc(signal_received, frame):
    print('SIGINT or CTRL-C detected')
    exit(0)

signal(SIGINT, sigint_proc)

def viz_polyline(values):
    values=np.array(values)
    pos=np.array(list(range(1, len(values)+1)))
    ymax=values.max()
    ymin=values.min()
    xmax=pos[np.argmax(values)]
    xmin=pos[np.argmin(values)]
    delta=(values.max() - values.min()) / 15.0
    plt.suptitle(\"$TITLE\")
    plt.title('Mean: {}, StdDev: {:.4f}'.format(stat.mean(values), stat.stdev(values), fontweight='bold'), fontweight='bold')
    plt.xlabel(\"$XLABEL\", fontweight='bold')
    plt.ylabel(\"$YLABEL\", fontweight='bold')
    plt.xticks(np.arange(pos.min(), pos.max(), 1))
    plt.yticks(np.arange(values.min(), values.max(), delta))
    plt.plot(pos, values, color='blue')
    plt.annotate('Max: {}'.format(ymax), xy=(xmax, ymax), xytext=(xmax, ymax))
    plt.annotate('Min: {}'.format(ymin), xy=(xmin, ymin), xytext=(xmin, ymin))
    plt.savefig(\"$INFILE.png\")
    plt.show()

def viz_polylines(values_list):
    if len(values_list) == 1:
        viz_polyline(values_list[0])
    else:
        for V in values_list:
            print(V)
    
values_list = []
with open(\"$INFILE\") as file:
    lines = file.readlines()
    for j in range(0, len(lines)):
        words = lines[j].strip().split(',')
        if not values_list:
            values_list = [[] for x in words]
            try:
                _ = float(words[0])
            except:
                continue
        for i in range(0, len(words)):
            values_list[i].append(float(words[i]))
            
viz_polylines(values_list)
"
}

function randoms() {
    if [[ -z $1 ]]; then
        echo "Usage: randoms <COUNT> <MIN> <MAX>" > /dev/stderr
        exit 1
    fi
    
    COUNT=$1
    MIN=$([[ -z $2 ]] && echo 0 || echo $2)
    MAX=$([[ -z $3 ]] && echo 100 || echo $3)
    NUMBERS=""
    
    for i in `seq 1 $COUNT`; do
        NUM=$(($MIN + $RANDOM % $MAX))
        if [[ -z $NUMBERS ]]; then
            NUMBERS=$NUM
        else
            NUMBERS="$NUMBERS $NUM"
        fi
    done
    
    echo $NUMBERS
}

function image() {
    if [[ -z $1 ]]; then
        echo "Usage: image <SUBCMD> [FILE...]" > /dev/stderr
        exit 1
    fi

    case $1 in
        combine)
            shift
            combine-images "$@"
        ;;
    esac
}

function combine-images() {
    FILES=""
    VERTICAL=0

    while [[ -n $1 ]]; do
        case $1 in
              -v|--vertical) VERTICAL=1 ;;
            -h|--horizontal) VERTICAL=0 ;;
            *)
                if [[ -z $FILES ]]; then
                    FILES="\"$1\""
                else
                    FILES="$FILES, \"$1\""
                fi
            ;;
        esac
        shift
    done

    python3 -c "
import sys
import subprocess as subproc
try:
    from PIL import Image
except:
    subproc.run('python3 -m pip install PIL', shell=True, check=True)
from PIL import Image

images = [Image.open(x) for x in [$FILES]]
widths, heights = zip(*(img.size for img in images))

if \"$VERTICAL\" == \"1\":
    sum_height = sum(heights)
    max_width = max(widths)
    new_image = Image.new('RGB', (max_width, sum_height))
    
    y_offset = 0
    for image in images:
        new_image.paste(image, (0, y_offset))
        y_offset += image.size[1]
else:
    sum_width = sum(widths)
    max_height = max(heights)
    new_image = Image.new('RGB', (sum_width, max_height))
    
    x_offset = 0
    for image in images:
        new_image.paste(image, (x_offset, 0))
        x_offset += image.size[0]

new_image.save('combined-image.jpg')
"
}

function check-ssh() {
    if [[ -z $1 ]]; then
        echo "Usage: check-ssh <IP>" > /dev/stderr
        exit 1
    fi
    
    which nmap > /dev/null || sudo apt install -y nmap
    nmap $1 -Pn -p ssh | egrep -io 'open|closed|filtered'
}

function find-mac-ip() {
    if [[ -f /tmp/zhujie-mac-ip ]]; then
        MAC_IP=$(cat /tmp/zhujie-mac-ip)
        if [[ $(check-ssh $MAC_IP) == open ]]; then
            echo $MAC_IP && return
        else
            echo "Info: SSH server ($MAC_IP:22) is not available"
        fi
    fi
}

function ip() {
     ifconfig | grep "inet " | awk '{print $2}' | sort
}

function z() {
    zhujie "$@"
}

function files() {
    which gtlfs > /dev/null || (
        sudo wget https://gtlfs.nvidia.com/client/linux -O /usr/local/bin/gtlfs &&
        sudo chmod +x /usr/local/bin/gtlfs
    )
    
    which gtlfs > /dev/null || (
        echo "Error: can't find gtlfs in PATH" > /dev/stderr
        exit 1
    )
    
    if [[ -f /tmp/zhujie-gtlfs-password-cache ]]; then
        PASSWD=$(cat /tmp/zhujie-gtlfs-password-cache)
    else
        read -p "GTLFS Password: " PASSWD
        echo $PASSWD > /tmp/zhujie-gtlfs-password-cache
    fi
    
    case $1 in 
        push|up)
            shift
            gtlfs push --username=wanliz --password=$PASSWD "$@"
        ;;
        pull|down)
            shift
            gtlfs pull --username=wanliz --password=$PASSWD "$@"
        ;;
        pull-rm|pop)
            shift
            gtlfs pull --username=wanliz --password=$PASSWD "$@" && (
                read -p "Remove it from server? (Y/n)" RSVP
                case $RSVP in
                    ""|y|Y|1)
                        echo y | gtlfs rm --username=wanliz --password=$PASSWD "$@"
                    ;;
                    *)
                        echo "Nothing removed"
                    ;;
                esac
            )
        ;;
        *)
            echo "Error: unknown argument $1" > /dev/stderr
            exit 1
        ;;
    esac
}

function active-resolution() {
    DEFAULT=""
    while [[ -n $1 ]]; do
        case $1 in
            -d|--default) DEFAULT=$1 ;;
        esac
    done
    
    RESOLUTION=""
    if [[ -f /tmp/zhujie-active-resolution ]]; then
        RESOLUTION=$(cat /tmp/zhujie-active-resolution)
    fi
    
    if [[ -z $RESOLUTION ]]; then
        if [[ -n $DEFAULT ]]; then
            read -p "Use the default resolution $DEFAULT? (Y/n): " RSVP
            case $RSVP in
                ""|y|Y|1) 
                    RESOLUTION=$DEFAULT 
                ;;
            esac
        fi
    fi
    
    if [[ -z $RESOLUTION ]]; then
        read -p "What resolution to use? (empty for $_4K): " RSVP
        case $RSVP in
            "") RESOLUTION=$_4K ;;
             *) RESOLUTION=$1 ;;
        esac
    fi
    
    case $RESOLUTION in
        1080|1080p|1080P) RESOLUTION=$_1080P ;;
        1k|1K) RESOLUTION=$_1K ;;
        2k|2K) RESOLUTION=$_2K ;;
        4k|4K) RESOLUTION=$_4K ;; 
    esac
    
    echo $RESOLUTION
}

function push-cpu-freq() {
    echo
}

function pop-cpu-freq() {
    echo
}

function push-gpu-freq() {
    echo
}

function pop-gpu-freq() {
    echo
}

function average-fps() {
    CPU_FREQ=""
    GPU_FREQ=""
    RESOLUTION=""
    SUFFIX=""
    LOOP=1
    SHOW_CONFIG=0
    
    while [[ -n $1 ]]; do
        case $1 in
             --cpu-freq) shift;  CPU_FREQ=$1; SUFFIX="-cpu-freq-$1" ;;
             --gpu-freq) shift;  GPU_FREQ=$1; SUFFIX="-gpu-freq-$1" ;;
            --resolution) shift; RESOLUTION=$1; SUFFIX="-$1" ;;
               -l|--loop) shift; LOOP=$1 ;;
               -s|--show-config) SHOW_CONFIG=1 ;;
        esac
    done
    
    if [[ -f /tmp/zhujie-average-fps$SUFFIX ]]; then
        rm -rf /tmp/zhujie-average-fps$SUFFIX
    fi
    
    push-cpu-freq $CPU_FREQ > /dev/null
    push-gpu-freq $GPU_FREQ > /dev/null
    if [[ -n $RESOLUTION ]]; then
        echo $RESOLUTION > /tmp/zhujie-active-resolution
    fi
    
    for i in `seq 1 $COUNT`; do
        "$@" >> /tmp/zhujie-average-fps$SUFFIX
    done
    
    if [[ -f $RESOLUTION ]]; then
        rm -rf /tmp/zhujie-active-resolution
    fi
    pop-gpu-freq > /dev/null
    pop-cpu-freq > /dev/null
    
    FPS=$(average --inline /tmp/zhujie-average-fps$SUFFIX)
    
    if [[ $SHOW_CONFIG == 1 ]]; then
        printf "%7.2f FPS    :: CPU Freq: $-4d MHz, GPU Clock: $-4d MHz, Resolution: %s\n" $FPS $CPU_CLOCK $GPU_CLOCK $RESOLUTION
    else
        echo $FPS
    fi
}

function is-cpu-limited() {
    LOOP=1
    CPU_FREQ_MIN=$(average-fps --show-config --loop $LOOP --cpu-freq min "$@" | awk '{ print $1 }')
    CPU_FREQ_CUR=$(average-fps --show-config --loop $LOOP --cpu-freq cur "$@" | awk '{ print $1 }')
    CPU_FREQ_MAX=$(average-fps --show-config --loop $LOOP --cpu-freq max "$@" | awk '{ print $1 }')
    if [[ $(has-nvidia-gpu) == 1 ]]; then
        GPU_FREQ_MIN=$(average-fps --show-config --loop $LOOP --gpu-freq min "$@" | awk '{ print $1 }')
        GPU_FREQ_CUR=$(average-fps --show-config --loop $LOOP --gpu-freq cur "$@" | awk '{ print $1 }')
        GPU_FREQ_MAX=$(average-fps --show-config --loop $LOOP --gpu-freq max "$@" | awk '{ print $1 }')
    else
        GPU_FREQ_MIN=0
        GPU_FREQ_CUR=0
        GPU_FREQ_MAX=0
    fi
    RESOLUTION_1K=$(average-fps --show-config --loop $LOOP --resolution ${_1K} "$@" | awk '{ print $1 }')
    RESOLUTION_2K=$(average-fps --show-config --loop $LOOP --resolution ${_2K} "$@" | awk '{ print $1 }')
    RESOLUTION_4K=$(average-fps --show-config --loop $LOOP --resolution ${_4K} "$@" | awk '{ print $1 }')
    
    printf "Game: %s"
    printf "CPU Freq Levels: [Min: %6.2f    Cur: %6.2f    Max: %6.2f]\n" $CPU_FREQ_MIN $CPU_FREQ_CUR $CPU_FREQ_MAX
    printf "GPU Freq Levels: [Min: %6.2f    Cur: %6.2f    Max: %6.2f]\n" $GPU_FREQ_MIN $GPU_FREQ_CUR $GPU_FREQ_MAX
    printf "    Resolutions: [ 1K: %6.2f     2K: %6.2f     4K: %6.2f]\n" $RESOLUTION_1K $RESOLUTION_2K $RESOLUTION_4K
}








case $1 in
    help)
        echo "Usage: zhujie <SUBCMD>" > /dev/stderr
        exit 1
    ;;
    ip)
        shift
        ip "$@"
    ;;
    sync)
        shift
        sync "$@"
    ;;
    build)
        shift
        build "$@"
    ;;
    install)
        shift
        install "$@"  
    ;;
    rm|remove)
        shift
        remove "$@"
    ;;
    ddnet)
        shift
        ddnet "$@"
    ;;
    talos)
        shift
        talos "$@"
    ;;
    drv|drivers)
        shift
        drivers "$@"
    ;;
    flgf|flamegraph)
        shift
        flamegraph "$@"
    ;;
    info)
        shift
        info "$@"
    ;;
    p4bisect)
        shift
        p4bisect "$@"
    ;;
    pic-v)
        shift
        pic-v "$@"
    ;;
    vpn)
        shift
        vpn "$@"
    ;;
    prime-run)
        shift
        prime-run "$@"
    ;;
    cskn|choose-kernel)
        shift
        choose-kernel "$@"
    ;;
    mean)
        shift
        mean "$@"
    ;;
    mean2)
        shift
        mean2 "$@"
    ;;
    avg|average)
        shift
        average "$@"
    ;;
    fkdp|fake-display)
        shift
        fake-display "$@"
    ;;
    vnc)
        shift
        vnc "$@"
    ;;
    x0vnc)
        shift
        x0vnc "$@"
    ;;
    apex)
        shift
        apex "$@"
    ;;
    catia)
        shift
        catia "$@"
    ;;
    creo)
        shift
        creo "$@"
    ;;
    dp|display)
        shift
        display "$@"
    ;;
    loop)
        shift
        loop "$@"
    ;;
    loop-v)
        shift
        loop-v "$@"
    ;;
    cpu-offline)
        shift
        cpu-offline "$@"
    ;;
    cpu-online)
        shift
        cpu-online "$@"
    ;;
    cpu)
        shift
        cpu "$@"
    ;;
    gpu)
        shift
        gpu "$@"
    ;;
    perf)
        shift
        perf "$@"
    ;;
    viz|visualize)
        shift
        visualize "$@"
    ;;
    img|image)
        shift
        image "$@"
    ;;
    fs|files)
        shift
        files "$@"
    ;;
    pull)
        shift
        files pull "$@"
    ;;
    push)
        shift
        files push "$@"
    ;;
    fetch)
        shift
        files pull-rm "$@"
    ;;
    is-cpu-limited)
        shift
        is-cpu-limited "$@"
    ;;
    
    
    mac)
        shift
        while [[ -z $(find-mac-ip) ]]; do
            read -p "Mac's IP: " MAC_IP
            echo $MAC_IP > /tmp/zhujie-mac-ip
        done
        scp "$@" zhujie@$(find-mac-ip):~/Downloads/
    ;;
    sh|save-htop-config)
        cp $HOME/.config/htop/htoprc $(dirname $0)
        echo "Saved to $(dirname $0)/htoprc"
    ;;
    rh|reset-htop-config)
        if [[ -f $(dirname $0)/htoprc ]]; then
            cp -f $(dirname $0)/htoprc $HOME/.config/htop/htoprc && (
                echo "Updated $HOME/.config/htop/htoprc"
            )
        else
            echo "Template doesn't exist" > /dev/stderr
        fi
    ;;
    hh|html-htop-screen)
        which aha > /dev/null || sudo apt install -y aha
        FILE=$HOME/zhujie-htop-screen.html
        INDEX=1
        while [[ -f $FILE ]]; do
            FILE=$HOME/zhujie-htop-screen-$INDEX.html
            INDEX=$(($INDEX+1))
        done
        echo q | htop | aha --black --line-fix > $FILE
        echo "Saved to $FILE"
    ;;
    test)
        for i in `seq 1 20`; do
            cpu-online
            cpu-offline $(randoms 8 1 23)
            talos >> talos-disable-random-8-cores.log
        done
        cpu-online 
    ;;
esac
